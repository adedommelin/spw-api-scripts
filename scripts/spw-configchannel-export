#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# RHN/Spacewalk XMLRPC API script
# requires the python-rhnapi module
#
# Copyright 2009-2012 Stuart Sears
#
# This file is part of spw-api-scripts
#
# spw-api-scripts is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# spw-api-scripts is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with spw-api-scripts. If not, see http://www.gnu.org/licenses/.

__doc__ = """
spw-configchannel-export

Exports the specified configuration channels, including all file content to a JSON-format text file.

useful for backing up configuration channels, or migrating to a different satellite.
"""

__author__ = "Stuart Sears <stuart@sjsears.com>"

# --------------------- Python Standard Library Modules ---------------------- #
import sys
import os
import time
from pprint import pprint
from optparse import OptionParser, OptionGroup
from fnmatch import fnmatch

# -------------------------- Custom Python Modules --------------------------- #
import rhnapi
from rhnapi import configchannel
# utility functions
from rhnapi import utils

# --------------------------- Script Configuration --------------------------- #

# server hostname and config file location
RHNHOST = 'localhost'
RHNCONFIG = '~/.rhninfo'

# Authentication config
# put these in your configfile, dammit;
RHNUSER = None
RHNPASS = None

# ---------------------------------------------------------------------------- #

def parse_cmdline(argv):
    """
    process the commandline :)
    give this sys.argv[1:] as an argument to avoid any issues with the script name
    being considered an 'argument' and processed
    """
    preamble = "Exports the chosen configuration channels to files in JSON format"
    usagestr = "%prog [OPTIONS] CONFIGCHANNELS..."
    # initialise our parser and set some default options
    parser = OptionParser(usage = usagestr, description = preamble)
    parser.add_option("--debug", action = "store_true", default = False,
        help = "enable debug output for RHN session (XMLRPC errors etc.) Sets loglevel to DEBUG.")
    parser.add_option('-v', '--verbose', action = 'store_true', default = False,
        help = "increase verbosity. Sets loglevel to INFO")
#    parser.add_option("-q", "--quiet", action = "store_true", default = False,
#        help = "Disable all logging and output")

    # RHN Satellite options group
    rhngrp = OptionGroup(parser, "RHN Satellite Options", "Defaults can be set in your RHN API config file (%s)" % RHNCONFIG )
    rhngrp.add_option("--server",help="RHN satellite server hostname [%default]", default=RHNHOST)
    rhngrp.add_option("--login", help="RHN login (username)" , default=RHNUSER)
    rhngrp.add_option("--pass", dest = "password", help="RHN password. This is better off in a config file.", default=RHNPASS)
    rhngrp.add_option("--config", dest = "config", help="Local RHN configuration file [ %default ]", default=RHNCONFIG)
    rhngrp.add_option("--cache", action = "store_true", default = False,
        help = "save usernames and password in config file, if missing")
    rhngrp.add_option("--log", dest = "logfile", default = None,
        help = "log output to the given filename. If you enable logging without this, logs go to stderr")
    parser.add_option_group(rhngrp)

    # script-specific options
    ccgrp = OptionGroup(parser, "Configuration Channel Options")
    ccgrp.add_option("--list", action="store_true", default=False, help="just list config channels and exit")
    ccgrp.add_option("-f","--filename", default=False, help="Output filename (calculated otherwise)")
    ccgrp.add_option("-g", "--glob", action = "store_true", default = False,
        help = "Config channel labels (provided as args) are shell-style wildcards (*?[a-c] etc).")
    parser.add_option_group(ccgrp)

    opts, args = parser.parse_args(argv)

    # so sanity-chacking stuff here

    # finally return the cleaned options and args
    return opts, args
    
# ---------------------------------------------------------------------------- #

def get_confchannel_info(rhn, channelobj):
    """
    processes the specified channels, getting filelists and metadata
    """
    rhn.logDebug("Processing Config Channel %(label)s" % channelobj)
    rhn.logDebug("* Listing channel content")
    filelist = [ x['path'] for x in configchannel.listFiles(rhn, channelobj['label']) ]
    channelobj['files'] = []
    for fentry in configchannel.lookupFileInfo(rhn, channelobj['label'], filelist):
        rhn.logDebug("* processing file %(path)s" % fentry)
        channelobj['files'].append(fentry)
    return channelobj

# ---------------------------------------------------------------------------- #

def chantable(channelinfo):
    """
    Pretty-print existing channels (label, name)
    parameters:
    channelinfo - list of channel dict
    """
    maxlen = utils.getMaxLen(channelinfo)
    fmtstr = "%%(label)-%(label)ds %%(name)-%(name)ds" % maxlen
    print fmtstr % { 'label' : 'Channel Label', 'name' : 'Channel Name' }
    print fmtstr % { 'label' : '-------------', 'name' : '------------' }
    for chan in channelinfo:
        print fmtstr % chan

# ---------------------------------------------------------------------------- #

def main():
    
    # process command-line arguments
    opts, args = parse_cmdline(sys.argv[1:])
    # initiate a connection to 
    if opts.debug:
        rhnloglevel = 10
    elif opts.verbose:
        rhnloglevel = 20
    else:
        rhnloglevel = 30

    global existing_channels

    try:
        RHN = rhnapi.rhnSession(opts.server, opts.login, opts.password,
                                config=opts.config, savecreds=opts.cache, debug=opts.debug,
                                logfile = opts.logfile, logenable = True,
                                logname = os.path.basename(sys.argv[0]), loglevel=rhnloglevel,
                                )
        # did we give the --verbose switch?
        if opts.verbose:
            RHN.enableVerbose()

        # debug dials up the logging some more
        if opts.debug:
            RHN.enableDebug()

        # get a list of all existing channels for listing
        existing_channels = configchannel.listGlobals(RHN)
        existing_labels = [ x['label'] for x in existing_channels ]

        channel_list = []

# if we provided no channel labels, we dump all available channels
        if len(args) == 0:
            RHN.logInfo("No config channel labels provided, using all existing channels")
            channel_list = existing_channels
            
# are the channels we selected actually glob/wildcard patterns
# in which case, we parse them and get their info into our channel list
        elif opts.glob:
            for glob in args:
                RHN.logDebug("matching glob %s" % glob)
                channel_list.extend([ x for x in existing_channels if fnmatch(x['label'], glob)])
# otherwise just run through the labels given as args and check if they exist:
        else:
            for chan in args:
                if chan in existing_labels:
                    channel_list.append([x for x in existing_channels if x['label'] == chan ])
                else:
                    RHN.logError("Provided Config Channel label %s does not exist. Skipping it" % chan)
                    continue
# Now we have list of channel objects, did we simply want to report them?
        if opts.list:
            chantable(channel_list)
            sys.exit(0)

# if we're not just listing channels, we need more data:
        for chan in channel_list:
            RHN.logInfo("processing channel '%(label)s'" % chan)
            chan.update(get_confchannel_info(RHN, chan))
    
        if opts.filename:
            outfile = opts.filename
        else:
            outfile = "configchannel_export-%s-%s.json" %(RHN.hostname,time.strftime('%Y%m%d.%H%M'))
        if len(channel_list) > 0:
            RHN.logInfo("saving channel data for selected channels to file %s" % outfile)
            if utils.dumpJSON(channel_list, outfile, verbose = opts.verbose):
                print "Exported chosen channels to %s" % outfile
            else:
                RHN.logError("Failed to export channel data to %s" % outfile)
                sys.exit(3)
        else:
            RHN.logError("Nothing to save. This should not happen.")
            sys.exit(4)

    except KeyboardInterrupt:
        print "Operation Cancelled\n"
        sys.exit(1)

# ---------------------------------------------------------------------------- #

if __name__ == '__main__':
    main()

# footer - do not edit below here
# vim: set et ai smartindent ts=4 sts=4 sw=4 ft=python:
