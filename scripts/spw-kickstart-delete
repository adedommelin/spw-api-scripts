#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# RHN/Spacewalk XMLRPC API script
# requires the python-rhnapi module
#
# Copyright 2009-2012 Stuart Sears
#
# This file is part of spw-api-scripts
#
# spw-api-scripts is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# spw-api-scripts is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with spw-api-scripts. If not, see http://www.gnu.org/licenses/.

__doc__ = """
spw-kickstart-delete

Irrevocably deletes a kickstart profile from your satellite
You can back them up first using spw-kickstart-export
"""

__author__ = "Stuart Sears <stuart@sjsears.com>"

# --------------------- Python Standard Library Modules  --------------------- #
import os
import sys
from optparse import OptionParser, OptionGroup


# -------------------------- Custom Python Modules --------------------------- #
import rhnapi
from rhnapi import kickstart

# --------------------------- Script Configuration --------------------------- #

# config file location and server hostname
RHNHOST = 'localhost'
RHNCONFIG = '~/.rhninfo'

# authentication information
# put these in your configfile, dammit;
RHNUSER = None
RHNPASS = None

# ---------------------------------------------------------------------------- #

def parse_cmdline(argv):
    """
    process the commandline :)
    give this sys.argv[1:] as an argument to avoid any issues with the script name
    being considered an 'argument' and processed
    """
    preamble = "Delete the provided kickstart profile(s) from your satellite. Use with care."
    usagestr = "%prog [OPTIONS] KICKSTART_LABEL..."
    # initialise our parser and set some default options
    parser = OptionParser(usage = usagestr, description = preamble)
    parser.add_option("--debug", action = "store_true", default = False,
        help = "enable debug output for RHN session (XMLRPC errors etc.) Sets loglevel to DEBUG.")
    parser.add_option('-v', '--verbose', action = 'store_true', default = False,
        help = "increase verbosity. Sets loglevel to INFO")
    parser.add_option("-q", "--quiet", action = "store_true", default = False,
        help = "Disable all non-essential console output")

    # RHN Satellite options group
    rhngrp = OptionGroup(parser, "RHN Satellite Options", "Defaults can be set in your RHN API config file (%s)" % RHNCONFIG )
    rhngrp.add_option("--server",help="RHN satellite server hostname [%default]", default=RHNHOST)
    rhngrp.add_option("--login", help="RHN login (username)" , default=RHNUSER)
    rhngrp.add_option("--pass", dest = "password", help="RHN password. This is better off in a config file.", default=RHNPASS)
    rhngrp.add_option("--config", dest = "config", help="Local RHN configuration file [ %default ]", default=RHNCONFIG)
    rhngrp.add_option("--cache", action = "store_true", default = False,
        help="Cache provided credentials in config file" )
    rhngrp.add_option("--log", dest = "logfile", default = None,
        help = "log output to the given filename. If you enable logging without this, logs go to stderr")
    parser.add_option_group(rhngrp)

    ksgrp = OptionGroup(parser, "kickstart options")
    ksgrp.add_option("--list", action = "store_true", default = False,
        help = "simply list existing kickstart profiles and exit")
    parser.add_option_group(ksgrp)

    # script-specific options
    opts, args = parser.parse_args(argv)

    # so sanity-chacking stuff here
    if len(args) == 0 and not opts.list:
        print "ERROR"
        print "You must provide a kickstart label or the --list option"
        parser.print_help()
        sys.exit(1)

    # finally return the cleaned options and args
    return opts, args

# ---------------------------------------------------------------------------- #

def main():
    # process command-line arguments
    opts, args = parse_cmdline(sys.argv[1:])
    if opts.debug:
        rhnloglevel = 10
    elif opts.verbose:
        rhnloglevel = 20
    else:
        rhnloglevel = 30

    try:
        RHN = rhnapi.rhnSession(opts.server, opts.login, opts.password,
                                config=opts.config, savecreds=opts.cache, debug=opts.debug,
                                logfile = opts.logfile, logenable = not(opts.quiet),
                                logname = os.path.basename(sys.argv[0]), loglevel=rhnloglevel,
                                )
        # did we give the --debug switch?
        if opts.verbose:
            RHN.enableVerbose()

        # debug dials up the logging some more
        if opts.debug:
            RHN.enableDebug()
        # list of kickstart profiles
        all_kickstarts = kickstart.listKickstarts(RHN)
        # just their labels for 'does this exist?' and '--list' options
        ks_labels = [ x.get('label') for x in all_kickstarts ]

        if opts.list:
            print "Existing Kickstart labels"
            print "========================="
            print '\n'.join(ks_labels)
            sys.exit(0)

        for kslabel in args:
            if kslabel not in ks_labels:
                print "no such kickstart profile: %s" % kslabel

            if kickstart.deleteProfile(RHN, kslabel):
                print "kickstart profile %s deleted" % kslabel
            else:
                print "failed to delete profile %s" % kslabel
            

        # do stuff
    except KeyboardInterrupt:
        print "Operation Cancelled\n"
        sys.exit(1)

# ---------------------------------------------------------------------------- #

if __name__ == '__main__':
    main()
    
# footer - do not edit below here
# vim: set et cindent ts=4 sts=4 sw=4 ft=python:
