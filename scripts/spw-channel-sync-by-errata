#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# RHN/Spacewalk XMLRPC API script
# ** delete as appropriate below **
# requires the python-rhnapi and python-progressbar modules
# requires the python-rhnapi module
#
# Copyright YEAR AUTHOR
#
# This file is part of spw-api-scripts
#
# spw-api-scripts is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# spw-api-scripts is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with spw-api-scripts. If not, see http://www.gnu.org/licenses/.


# --------------------- Python Standard Library Modules ---------------------- #
import os
import sys
import time
from optparse import OptionParser, OptionGroup

# -------------------------- Custom Python Modules --------------------------- #
import rhnapi
from rhnapi import channel, errata, packages

from progressbar import Counter,Percentage,ProgressBar,Timer,AnimatedMarker,Bar
# ------------------------- Docstring and file info -------------------------- #
__doc__ = """
%s
Synchronises two channels via errata cloning/publishing and package pushing
""" % os.path.basename(__file__)
__author__ = "Stuart Sears <stuart.sears@man.com>"

# -------------------------- RHN API Configuration --------------------------- #

# server hostname and config file location
RHNCONFIG = '~/.rhninfo'
RHNHOST = 'localhost'

# authentication information
# put these in your configfile, dammit;
RHNUSER = None
RHNPASS = None


# --------------------------- Script Configuration --------------------------- #
# put global variables for the script in here

# ---------------------------------------------------------------------------- #

def parse_cmdline(argv):
    """
    process and check commandline options and arguments.
    Called against sys.argv[1:] to ignore the script name itself.
    """
    def error(errlines, exitcode = 1):
        """
        parser-specific error handling
        params:
        errlines(list)      - list (or tuple/set) of lines in error message
        exitcode(int)       - return code for exit statement.
        """
        print "\n".join(errlines)
        parser.print_help()
        sys.exit(exitcode)

    preamble = """A short desrciption of what the script does. Will appear in --help output."""

    usagestr = "%prog [RHNOPTS]"
    
    # initialise our parser and set some default options
    parser = OptionParser(usage = usagestr, description = preamble)
    parser.add_option("--debug", action = "store_true", default = False,
        help = "enable debug output for RHN session (XMLRPC errors etc.) Sets loglevel to DEBUG.")
    parser.add_option('-v', '--verbose', action = 'store_true', default = False,
        help = "increase verbosity. Sets loglevel to INFO")

    # RHN Satellite options group
    rhngrp = OptionGroup(parser, "RHN Satellite Options", "Defaults can be set in your RHN API config file (%s)" % RHNCONFIG )
    rhngrp.add_option("--server",help="RHN satellite server hostname [%default]", default=RHNHOST)
    rhngrp.add_option("--login", help="RHN login (username)" , default=RHNUSER)
    rhngrp.add_option("--pass", dest = "password", help="RHN password. This is better off in a config file.", default=RHNPASS)
    rhngrp.add_option("--config", dest = "config", help="Local RHN configuration file [ %default ]", default=RHNCONFIG)
    rhngrp.add_option("--cache", action = "store_true", default = False,
        help = "save usernames and password in config file, if missing")
    rhngrp.add_option("--log", dest = "logfile", default = None,
        help = "log output to the given filename. If you enable logging without this, logs go to stderr")
    parser.add_option_group(rhngrp)

    changrp = OptionGroup(parser, "Channel Selection options")
    changrp.add_option("-s", "--source",
            help="Source Channel for package and errata updates")
    changrp.add_option("-d", "--dest",
            help="Destination Channel for package and errata updates")
    changrp.add_option("--test", action="store_true", default=False,
            help="Calculate diff and report without making changes")
    parser.add_option_group(changrp)


    # by default
    if len(argv) == 0:
        parser.print_help()
        sys.exit(0)

    opts, args = parser.parse_args(argv)
    # check the args for errors etc...
    if not (opts.source or opts.dest):
        error(["Error: both --source and --dest are required"], 1)

    # finally...
    return opts, args
        
# ---------------------------------------------------------------------------- #


def main(argv):    
    opts, args = parse_cmdline(argv[1:])

    if opts.debug:
        rhnloglevel = 10
    elif opts.verbose:
        rhnloglevel = 20
    else:
        rhnloglevel = 30

    try:
        RHN = rhnapi.rhnSession(opts.server,
                                opts.login,
                                opts.password,
                                config=opts.config,
                                savecreds=opts.cache,
                                debug=opts.debug,
                                logfile=opts.logfile,
                                logenable=True,
                                logname=os.path.basename(argv[0]),
                                loglevel=rhnloglevel,
                                )
        # DO STUFF with your RHN session and commandline options
        
# tasks
# 1. get package lists from source and dest channels
# 2. remove all packages already in destination channel
# 3. Find all the packages provided by errata
# 4. sync those        
        
        # list packages in source channel - we are specifically interested in
        # the latest versions only.
        srcpkgs = channel.listLatestPackages(RHN, opts.source)
        dstpkgs = channel.listLatestPackages(RHN, opts.dest)

        # extract names for diffing purposes
        srcindex = dict(zip([ "%(name)s-%(version)s-%(release)s.%(arch_label)s" % p for p in srcpkgs ], srcpkgs))
        dstindex = dict(zip([ "%(name)s-%(version)s-%(release)s.%(arch_label)s" % p for p in dstpkgs ], dstpkgs))
        srcerrata = [ e.get('advisory') for e in channel.listErrata(RHN, opts.source) ]

        RHN.logDebug("%d packages in source channel %s" %(len(srcindex),opts.source))
        RHN.logDebug("%d packages in destination channel %s" %(len(srcindex),opts.dest))
        pkgdiff = set(srcindex.keys())
        pkgdiff.difference_update(dstindex.keys())
        RHN.logDebug("%d packages in %s but not in %s" %(len(pkgdiff), opts.source,opts.dest))

        errlist = set([])
        nonerrpkgs = set([])
        count = 0
        widgets = ['progress: ', Counter(), '/ %d Packages [' % len(pkgdiff), Percentage(), ']', Bar(), '(', Timer(), ')']
        pbar = ProgressBar(widgets=widgets, maxval=len(pkgdiff), term_width=80).start()
# do stuff
        for pkg in pkgdiff:
            count += 1
            pkgobj = srcindex.get(pkg)
            erratalist = packages.listProvidingErrata(RHN, pkgobj.get('id'))
            if len(erratalist) == 0:
                RHN.logDebug("Package %s does not appear to come from an erratum" % pkg)
                nonerrpkgs.add(pkg)
            else:
                for e in erratalist:
                    if e['advisory'] in srcerrata:
                        RHN.logDebug("Adding %(advisory)s to sync list" % e)
                        errlist.add(e['advisory'])
                    else:
                        RHN.logDebug("Cannot find Erratum %(advisory)s in source channel, ignoring" % e)
            pbar.update(count)
        print
        print "Found %d Errata to Sync" % len(errlist)
        print "Found %d packages not provided by errata" % len(nonerrpkgs)
        print "\n".join(nonerrpkgs)
        tstamp = time.strftime('%Y%m%d_%H%M%S')
        outfile = '/tmp/%s-sync-data-%s.txt' % (opts.dest, tstamp)
        try:
            fd = open(outfile, 'wb')
            if len(errlist) > 0:
                print "%d Errata found" % len(errlist)
                fd.writelines([
                    "Errata to sync to %s\n" % opts.dest,
                    "----------------------\n",
                    ])
                fd.writelines(["%s\n" % e for e in errlist])
            if len(nonerrpkgs) > 0:
                print "%d Packages (not from errata)" % len(nonerrpkgs)
                fd.writelines([
                    "Packages (not from Errata)\n",
                    "--------------------------\n",
                    ])
                fd.writelines(["%s\n" % e for e in nonerrpkgs])
            fd.close()
        except:
            print "unable to write to output file %s" % outfile

    except KeyboardInterrupt:
        print "Operation cancelled by keystroke."
        sys.exit(1)
    
if __name__ == '__main__':
    main(sys.argv)



# footer - do not edit below here
# vim: set et ai smartindent ts=4 sts=4 sw=4 ft=python nofen:
