#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# RHN/Spacewalk XMLRPC API script
# ** delete as appropriate below **
# requires the python-rhnapi and python-progressbar modules
#
# Copyright YEAR AUTHOR
#
# This file is part of spw-api-scripts
#
# spw-api-scripts is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# spw-api-scripts is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with spw-api-scripts. If not, see http://www.gnu.org/licenses/.

"""
API script template file.
"""
__author__ = "Your Name <email>"

# --------------------- Python Standard Library Modules ---------------------- #
import os
import sys
from optparse import OptionParser, OptionGroup

# -------------------------- Custom Python Modules --------------------------- #
import rhnapi
from rhnapi import channel
from rhnapi import utils
# not sure if I need this yet
# from rhnapi import packages

# may remove some of these later
from progressbar import Counter,Percentage,ProgressBar, Timer, AnimatedMarker, Bar

# -------------------------- RHN API Configuration --------------------------- #

# server hostname and config file location
RHNCONFIG = '~/.rhninfo'
RHNHOST = 'localhost'

# authentication information
# put these in your configfile, dammit;
RHNUSER = None
RHNPASS = None


# --------------------------- Script Configuration --------------------------- #
# put global variables for the script in here

# ---------------------------------------------------------------------------- #

def parse_cmdline(argv):
    """
    process the commandline :)
    """
    def error(errlines, exitcode = 1):
        """
        parser-specific error handling
        params:
        errlines(list)      - list (or tuple/set) of lines in error message
        exitcode(int)       - return code for exit statement.
        """
        print
        print "\n".join(errlines)
        parser.print_help()
        sys.exit(exitcode)

    preamble = """Generates a package index file for the chosen satellite, using the API. This can be a longwinded process"""

    usagestr = "%prog [RHNOPTS] OUTPUTFILE"
    
    # initialise our parser and set some default options
    parser = OptionParser(usage = usagestr, description = preamble)
    parser.add_option("--debug", action = "store_true", default = False,
        help = "enable debug output for RHN session (XMLRPC errors etc.) Sets loglevel to DEBUG.")
    parser.add_option('-v', '--verbose', action = 'store_true', default = False,
        help = "increase verbosity. Sets loglevel to INFO")
    parser.add_option('-p', '--progress', action = 'store_true', default = False,
        help = "Show a progressbar for long-running operations")
    parser.add_option('-f', '--force', action = 'store_true', default = False,
        help = "Overwrite output file if it already exists.")

    # RHN Satellite options group
    rhngrp = OptionGroup(parser, "RHN Satellite Options", "Defaults can be set in your RHN API config file (%s)" % RHNCONFIG )
    rhngrp.add_option("--server",help="RHN satellite server hostname [%default]", default=RHNHOST)
    rhngrp.add_option("--login", help="RHN login (username)" , default=RHNUSER)
    rhngrp.add_option("--pass", dest = "password", help="RHN password. This is better off in a config file.", default=RHNPASS)
    rhngrp.add_option("--config", dest = "config", help="Local RHN configuration file [ %default ]", default=RHNCONFIG)
    rhngrp.add_option("--cache", action = "store_true", default = False,
        help = "save usernames and password in config file, if missing")
    rhngrp.add_option("--log", dest = "logfile", default = None,
        help = "log output to the given filename. If you enable logging without this, logs go to stderr")
    parser.add_option_group(rhngrp)

    opts, args = parser.parse_args(argv)

    # check the args for errors etc...
    # expecting outputfile on the command line
    if len(args) != 1:
        error(["ERROR: No output file provided."])
    # barf if it already exists and we aren't forcibly overwriting it.
    elif os.path.isfile(args[0]) and not opts.force:
        error(["ERROR: Output file %s already exists" % args[0],
               "Either remove or rename the file, or provide the '-f/--force' option to overwrite it"],
               2)
    else:
        outfile = args[0]


    # finally...
    return opts, outfile
        
# ---------------------------------------------------------------------------- #


def main(argv):    
    opts, outputfile = parse_cmdline(argv[1:])

    if opts.debug:
        rhnloglevel = 10
    elif opts.verbose:
        rhnloglevel = 20
    else:
        rhnloglevel = 30

    try:
        RHN = rhnapi.rhnSession(opts.server, opts.login, opts.password,
                                config=opts.config, savecreds=opts.cache, debug=opts.debug,
                                logfile = opts.logfile, logenable = True,
                                logname = os.path.basename(argv[0]), loglevel=rhnloglevel,
                                )
        # did we give the --verbose switch?
        if opts.verbose:
            RHN.enableVerbose()

        # debug dials up the logging some more
        if opts.debug:
            RHN.enableDebug()
        # DO STUFF with your RHN session and commandline options

        chanlist = channel.listAllChannels(RHN)
        maxlen = utils.getMaxLen(chanlist)
        fmtstr = '%%(label)-%(label)ds' % maxlen
        pkgindex = {}
        print "Indexing unique packages by channel"

        for chan in chanlist:
            RHN.logInfo("Processing Channel %s (%s)" % (chan.get('label'), chan.get('name')))
            if chan.get('packages', 0) != 0:
                packagelist = channel.listAllPackages(RHN, chan.get('label'))
            else:
                RHN.logDebug("Channel %s contains no packages, skipping it" % chan.get('label'))
                continue
            if opts.progress:
                widgets = [ fmtstr % chan, Counter(), ' Packages [', Percentage(), ']', '(', Timer(), ')']
                pbar = ProgressBar(maxval = len(packagelist), widgets = widgets).start()
            for p in packagelist:
                k, v = '%(name)s-%(version)s-%(release)s.%(arch_label)s' % p, p.get('id')
                if pkgindex.has_key(k):
                    RHN.logDebug("Skipping existing package %s" % k)
                else:
                    pkgindex[k] = v
                if opts.progress:
                    pbar.update(packagelist.index(p) + 1 )
        print                    
        print "Done. %d unique packages indexed" % len(pkgindex)
        print "Dumping to output file %s" % outputfile

        utils.dumpJSON(pkgindex, outputfile)


    except KeyboardInterrupt:
        print "Operation cancelled by keystroke."
        sys.exit(1)
    
if __name__ == '__main__':
    main(sys.argv)



# footer - do not edit below here
# vim: set et ai smartindent ts=4 sts=4 sw=4 ft=python:
