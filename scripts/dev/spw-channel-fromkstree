#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# RHN/Spacewalk XMLRPC API script
# ** delete as appropriate below **
# requires the python-rhnapi and python-progressbar modules
# requires the python-rhnapi module
#
# Copyright YEAR AUTHOR
#
# This file is part of spw-api-scripts
#
# spw-api-scripts is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# spw-api-scripts is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with spw-api-scripts. If not, see http://www.gnu.org/licenses/.

"""
API script template file.
"""
__author__ = "Your Name <email>"

# --------------------- Python Standard Library Modules ---------------------- #
import os
import sys
import yum
from optparse import OptionParser, OptionGroup

# -------------------------- Custom Python Modules --------------------------- #
import rhnapi
from rhnapi import packages
from rhnapi import channel

# -------------------------- RHN API Configuration --------------------------- #

# server hostname and config file location
RHNCONFIG = '~/.rhninfo'
RHNHOST = 'localhost'

# authentication information
# put these in your configfile, dammit;
RHNUSER = None
RHNPASS = None


# --------------------------- Script Configuration --------------------------- #
# put global variables for the script in here

# ---------------------------------------------------------------------------- #

def parse_cmdline(argv):
    """
    process the commandline :)
    """

    def error(msglines, exitcode = 1):
        """
        For consistent error handling.
        print error message (list of lines), help output
        and exit with the provided code (or 1)
        """
        print '\n'.join(msglines)
        parser.print_help()
        sys.exit(exitcode)
        
    preamble = """Generates a new software channel based on a kickstart tree on your satellite.
Another take on the spacewalk-create-channel script, but pulling the channel information from a
satellite kickstart tree rather than a datafile. This currently assumes that these are RH kickstart trees, to allow us to easily parse the source channel for cloning/creation.
"""
    usagestr = "%prog [RHNOPTS]"
    # initialise our parser and set some default options
    parser = OptionParser(usage = usagestr, description = preamble)
    parser.add_option("--debug", action = "store_true", default = False,
        help = "enable debug output for RHN session (XMLRPC errors etc.) Sets loglevel to DEBUG.")
    parser.add_option('-v', '--verbose', action = 'store_true', default = False,
        help = "increase verbosity. Sets loglevel to INFO")

    # RHN Satellite options group
    rhngrp = OptionGroup(parser, "RHN Satellite Options", "Defaults can be set in your RHN API config file (%s)" % RHNCONFIG )
    rhngrp.add_option("--server",help="RHN satellite server hostname [%default]", default=RHNHOST)
    rhngrp.add_option("--login", help="RHN login (username)" , default=RHNUSER)
    rhngrp.add_option("--pass", dest = "password", help="RHN password. This is better off in a config file.", default=RHNPASS)
    rhngrp.add_option("--config", dest = "config", help="Local RHN configuration file [ %default ]", default=RHNCONFIG)
    rhngrp.add_option("--cache", action = "store_true", default = False,
        help = "save usernames and password in config file, if missing")
    rhngrp.add_option("--log", dest = "logfile", default = None,
        help = "log output to the given filename. If you enable logging without this, logs go to stderr")
    parser.add_option_group(rhngrp)

    # script-specific options - put these in their own OptionGroup
    relgrp = OptionGroup(parser, "Channel creation options")
    relgrp.add_option("-r", "--release", "RHEL release version, in major.minor format, e.g. 5.8 or 6.0")
    relgrp.add_option("-a", "--arch", "Channel architecture, defaults to 'x86_64'")
    relgrp.add_option("-c", "--channel", "Label for new software channel")
    relgrp.add_option("-n", "--name", "Name for new software channel")
    relgrp.add_option("-k", "--kstree", 
     help = "specify the kickstart tree name directly. Otherwise it is generated from the above")
    parser.add_option_group(relgrp)

    opts, args = parser.parse_args(argv)
    # check the args for errors etc...

    # finally...
    return opts, args

# ---------------------------------------------------------------------------- #

def getpackages(reponame, url, cachedir = '/tmp/yumcache'):
    """
    uses the yum python api to fetch a list of packages for the given repo
    cachedir enables us to use this as a non-privileged user (no write privs on
    /var/cache/yum)
    """
    # initialiase a yum session
    yb = yum.YumBase()
    # disable all existing repos
    yb.repos.disableRepo('*')
    yb.conf.cache = 0
    # 
    if not os.path.isdir(cachedir):
        try:
            os.makedirs(cachedir)
        except:
            print "cachedir %s does not exist and I cannot create it. Exiting" % cachedir
            sys.exit(2)

    yb.setCacheDir(cachedir)

    yb.add_enable_repo(reponame, [url], enable_groups = True)

    pkglist = yb.pkgSack.returnPackages()

    return pkglist



# ---------------------------------------------------------------------------- #


def main():    
    opts, args = parse_cmdline(sys.argv[1:])
    if opts.debug:
        rhnloglevel = 10
    elif opts.verbose:
        rhnloglevel = 20
    else:
        rhnloglevel = 30

    # initialise an RHN Session
    # safety mechanism until the script actually works:
    try:
        RHN = rhnapi.rhnSession(opts.server, opts.login, opts.password,
                                config=opts.config, savecreds=opts.cache, debug=opts.debug,
                                logfile = opts.logfile, logenable = True,
                                logname = os.path.basename(sys.argv[0]), loglevel=rhnloglevel,
                                )
        # did we give the --verbose switch?
        if opts.verbose:
            RHN.enableVerbose()

        # debug dials up the logging some more
        if opts.debug:
            RHN.enableDebug()
        # DO STUFF with your RHN session and commandline options
    except KeyboardInterrupt:
        print "Operation cancelled by keystroke."
        sys.exit(1)
    
if __name__ == '__main__':
    main()



# footer - do not edit below here
# vim: set et ai smartindent ts=4 sts=4 sw=4 ft=python nu:
