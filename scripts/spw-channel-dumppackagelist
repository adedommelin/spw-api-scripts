#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# RHN/Spacewalk XMLRPC API script
# requires the python-rhnapi module
#
# Copyright 2012 (c)Stuart Sears <stuart.sears@man.com>
#
# This file is part of spw-api-scripts
#
# spw-api-scripts is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# spw-api-scripts is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with spw-api-scripts. If not, see http://www.gnu.org/licenses/.

__doc__ = """
spw-channel-dumppackagelist

Script to list all packages in a channel (and optionally all child channels) on
your RHN satellite or spacewalk server. Tested and working on RHN Satellite 5.4.1
"""
__author__ = "Stuart Sears <stuart.sears@man.com>"

# --------------------- Python Standard Library Modules ---------------------- #
import os
import sys
from optparse import OptionParser, OptionGroup

# -------------------------- Custom Python Modules --------------------------- #
import rhnapi
from rhnapi import channel

# -------------------------- RHN API Configuration --------------------------- #

# server hostname and config file location
RHNCONFIG = '~/.rhninfo'
RHNHOST = 'localhost'

# authentication information
# put these in your configfile, dammit;
RHNUSER = None
RHNPASS = None


# --------------------------- Script Configuration --------------------------- #
# put global variables for the script in here

# ---------------------------------------------------------------------------- #

def parse_cmdline(argv):
    """
    list All packages in a given channel in E:NVR.A format, outputting to a text file.
    """
    preamble = """Lists all packages in a channel, dumping to a text file.
Useful for recreating channels on another box, or basic reporting"""
    usagestr = "%prog [RHNOPTS] CHANNELLABEL"
    # initialise our parser and set some default options
    parser = OptionParser(usage = usagestr, description = preamble)
    parser.add_option("--debug", action = "store_true", default = False,
        help = "enable debug output for RHN session (XMLRPC errors etc.) Sets loglevel to DEBUG.")
    parser.add_option('-v', '--verbose', action = 'store_true', default = False,
        help = "increase verbosity. Sets loglevel to INFO")

    # RHN Satellite options group
    rhngrp = OptionGroup(parser, "RHN Satellite Options", "Defaults can be set in your RHN API config file (%s)" % RHNCONFIG )
    rhngrp.add_option("--server",help="RHN satellite server hostname [%default]", default=RHNHOST)
    rhngrp.add_option("--login", help="RHN login (username)" , default=RHNUSER)
    rhngrp.add_option("--pass", dest = "password", help="RHN password. This is better off in a config file.", default=RHNPASS)
    rhngrp.add_option("--config", dest = "config", help="Local RHN configuration file [ %default ]", default=RHNCONFIG)
    rhngrp.add_option("--cache", action = "store_true", default = False,
        help = "save usernames and password in config file, if missing")
    rhngrp.add_option("--log", dest = "logfile", default = None,
        help = "log output to the given filename. If you enable logging without this, logs go to stderr")
    parser.add_option_group(rhngrp)

    # script-specific options - put these in their own OptionGroup
    pkggrp = OptionGroup(parser, "Package/Channel Options")
    pkggrp.add_option("-d", "--destdir", dest = "dir", help = "destination directory for all output files.")
    pkggrp.add_option("-r", "--recursive", action="store_true", default=False,
        help="process all child channels of CHANNELLABEL. Creates one output file per channel.")
    pkggrp.add_option("-l", "--latest", action="store_true", default=False,
        help="List only the latest version for each package in the chosen software channels")
    parser.add_option_group(pkggrp)


    if len(argv) == 0:
        parser.print_help()
        sys.exit(0)

    opts, args = parser.parse_args(argv)
    # check the args for errors etc...
    if len(args) != 1:
        print "ERROR: no channel label supplied"
        parser.print_help()
        sys.exit(1)

    # finally...
    return opts, args
        
# ---------------------------------------------------------------------------- #


def main():    
    opts, args = parse_cmdline(sys.argv[1:])
    if opts.debug:
        rhnloglevel = 10
    elif opts.verbose:
        rhnloglevel = 20
    else:
        rhnloglevel = 30

    # initialise an RHN Session
    try:
        RHN = rhnapi.rhnSession(opts.server, opts.login, opts.password,
                                config=opts.config, savecreds=opts.cache, debug=opts.debug,
                                logfile = opts.logfile, logenable = True,
                                logname = os.path.basename(sys.argv[0]), loglevel=rhnloglevel,
                                )
        # did we give the --verbose switch?
        if opts.verbose:
            RHN.enableVerbose()

        # debug dials up the logging some more
        if opts.debug:
            RHN.enableDebug()
        # DO STUFF with your RHN session and commandline options
        chanlabel = args[0]

# does the channel we specified actually exist?
        try:
            RHN.logDebug("Looking up info for channel label %s" % chanlabel)
            chanobj = channel.getDetails(RHN, chanlabel)
            if not chanobj:
                RHN.logError("No such channel: %s" % chanlabel)
                sys.exit(3)
            isparent = chanobj.get('parent_channel_label').strip() == '' 
            chanlist = [ chanobj ]

# are we in recursive mode and are there any child channels to list?            
            if opts.recursive:
                if not isparent:
                    RHN.logError("Channel %s has no child channels" % chanlabel)
                else:
                    chanlist.extend(channel.listChildren(RHN, chanlabel))
# process each channel at a time and dump a package list
            for chan in chanlist:
                if opts.dir:
                    outputfile = os.path.join(opts.dir, "%s-pkglist.txt" % chan.get('label'))
                else:
                    outputfile = "%s-pkglist.txt" % chan.get('label')
                RHN.logInfo("listing packages for channel %(label)s" % chan)
                if opts.latest:
                    packageobjs = channel.listLatestPackages(RHN, chan['label'])
                else:                    
                    packageobjs = channel.listAllPackages(RHN, chan['label'])

                RHN.logDebug("Got %d packages" % len(packageobjs))
                pkglist = []
                for pkg in packageobjs:
                    # RHN.logDebug("processing package ID %(id)d - %(name)s-%(version)s-%(release)s.%(arch_label)s" % pkg)
                    if pkg['epoch'].strip() != '':
                        pkgstr = "%(name)s-%(version)s-%(release)s.%(arch_label)s:%(epoch)s\n" % pkg
                    else:
                        pkgstr = "%(name)s-%(version)s-%(release)s.%(arch_label)s\n" % pkg
                    RHN.logDebug("processed %s" % pkgstr.strip())
                    pkglist.append(pkgstr)
                try:
                    RHN.logInfo("writing package list to %s" % outputfile)
                    fd = open(outputfile, 'wb')
                    fd.writelines(pkglist)
                    fd.close
                except:
                    RHN.logErr("Failed to create output file %s" % outputfile)
                    continue
        except:
            RHN.logError("Error getting channel details - does %s actually exist?" % chanlabel)
            sys.exit(3)
        
    except KeyboardInterrupt:
        print "Operation cancelled by keystroke."
        sys.exit(1)
    
if __name__ == '__main__':
    main()



# footer - do not edit below here
# vim: set et ai smartindent ts=4 sts=4 sw=4 ft=python:
