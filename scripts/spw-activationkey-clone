#!/usr/bin/env python
# -*- coding: utf-8 -*-
# RHN/Spacewalk XMLRPC API script
# requires the python-rhnapi module
#
# Copyright 2009-2012 Stuart Sears / Steven Hardy
#
# This file is part of spw-api-scripts
#
# spw-api-scripts is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# spw-api-scripts is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with spw-api-scripts. If not, see http://www.gnu.org/licenses/.

__doc__ = """
spw_clone_activationkey

A script to clone an activation key
simply intended to copy it and all its settings to a new key, which we can then edit.

"""
__author__ = "Stuart Sears <stuart@sjsears.com>"

# --------------------- Python Standard Library Modules ---------------------- #
import os
import sys
import re
import time
from optparse import OptionParser, OptionGroup
from pprint import pprint

# -------------------------- Custom Python Modules --------------------------- #
import rhnapi
from rhnapi import activationkey
from rhnapi import user
from rhnapi import systemgroup

# --------------------------- Script Configuration --------------------------- #

# config file location and server hostname
RHNCONFIG = '~/.rhninfo'
RHNHOST = 'localhost'

# authentication config
# put these in your configfile, dammit;
RHNUSER = None
RHNPASS = None


# regex to match reactivation keys
react_re = re.compile(r'^(Kickstart )?(Reactivation|re-activation) Key.*$', re.I)

# --------------------------------------------------------------------------------- #

def parse_cmdline(argv):
    """
    process the commandline :)
    """
    preamble = "Clone an activation key with all settings intact."
    usagestr = "%prog [RHNOPTS] [KEYOPTS] ACTIVATIONKEY"
    # initialise our parser and set some default options
    parser = OptionParser(usage = usagestr, description = preamble)
    parser.add_option("-V", "--debug", action = "store_true", default = False,
            help = "enable debug output for RHN session (XMLRPC errors etc")
    parser.add_option("-v", "--verbose", action = "store_true", default = False,
            help = "enable extra informational output")
    parser.add_option("-q", "--quiet", action = "store_true", default = False, help = "Disable all logging and output")

    # RHN Satellite options group
    rhngrp = OptionGroup(parser, "RHN Satellite Options", "Defaults can be set in your RHN API config file (%s)" % RHNCONFIG )
    rhngrp.add_option("--server", default=RHNHOST,
        help="RHN satellite server hostname [%default]")
    rhngrp.add_option("--login", default = RHNUSER,
        help="RHN login (username)")
    rhngrp.add_option("--pass", dest = "password", default = RHNPASS,
        help="RHN password. This is better off in a config file.")
    rhngrp.add_option("--config", dest = "config", default = RHNCONFIG,
        help="Local RHN configuration file [ %default ]")
    rhngrp.add_option("--cache", action = "store_true", default = False,
        help = "save usernames and password in config file, if missing")
    rhngrp.add_option("--log", dest = "logfile", default = None,
        help = "log output to the given filename. If you enable logging without this, logs go to stderr")
    parser.add_option_group(rhngrp)

    # key-specific options
    keygrp = OptionGroup(parser, "Activation Key Options",
        "Use these to customise your cloned key. If omitted most will be inherited from the source key")
    keygrp.add_option("-k", "--key",
        help = "Specify the key (hex code) for the clone. Cannot contain spaces [Autogenerated].")
    keygrp.add_option("-d", "--description", help = "Cloned key description [inherited].")
    keygrp.add_option("-s", "--summary", help = "Cloned key summary [inherited].")
    keygrp.add_option("--list", action = "store_true", default = False,
        help = "list activation keys and exit")
    parser.add_option_group(keygrp)

    # script-specific options


    if len(argv) == 0:
        parser.print_help()
        sys.exit(0)

    opts, args = parser.parse_args(argv)

    # expecting an activation key as an argument
    if len(args) == 0 and not opts.list:
        print "no activationkey provided.\n"
        parser.print_help()
        sys.exit(1)
    # so, if we provided a 1- at the start of the key, strip it...
    # regex used to match any number
    if opts.key and re.match(r'^[0-9]+-', opts.key):
        opts.key = '-'.join(opts.key.split('-')[1:])

    # finally...
    return opts, args


# --------------------------------------------------------------------------------- #

def clone_activationkey(rhn, keyobj, description, logger, newkey = '', verbose = False):
    """
    Activation Key Cloning.
    Creates a new key based on the 'keyobj' parameter, then sets any missing elements (packages etc etc)

    parameters:
    rhn(rhnapi.rhnSession)
    keyobj(dict)
    description(str)
    newkey(str)
    verbose(bool)
    """
    if keyobj.get('usage_limit', 0) == 0:
        del keyobj['usage_limit']
    else:
        cloneusage = None

    # create a new activation key from the old one, using our new description and possibly our chosen key:
    newkey = activationkey.create(rhn,
             description,
             newkey,
             keyobj.get('base_channel_label',''),
             keyobj.get('entitlements', []),
             keyobj.get('usage_limit', None),
             keyobj.get('universal_default', False),
             )

    if isinstance(newkey, str):
        print "Cloned Key %s as %s" %(keyobj['key'], newkey)
        # set child channels
        childchans = keyobj.get('child_channel_labels', [])
        if len(childchans) > 0:
            if activationkey.addChildChannels(RHN, newkey, childchans):
                logger.info("added child channels %r" % childchans)
                print "Added Child Channels"
                for chan in childchans:
                    print "  - %s" % chan

        # set configuration channels
        confchans = keyobj.get('config_channels',[])
        if len(confchans) > 0:
            if activationkey.setConfigChannels(RHN, [newkey], confchans):
                print "Added Configuration Channels"
                logger.info("Added Configuration Channels %r" % confchans)
                for chan in confchans:
                    print "  - %s" % chan

        # set packages
        if len (keyobj.get('packages',[])) > 0:
            print "Adding packages"
            for pkg in keyobj.get('packages'):
                if activationkey.addPackages(RHN, newkey, [ pkg ]):
                    print "  - %s %s" %(pkg.get('name'), pkg.get('arch', '') )

        servergroups = keyobj.get('server_group_ids', [])
        if len(servergroups) > 0:
            if activationkey.addServerGroups(RHN, newkey, servergroups):
                print "Added Server Groups"
                for grp in servergroups:
                    print "  - %(id)d (%(name)s)" % systemgroup.getDetails(rhn, grp)

        if keyobj.get('config_deploy', False):
            activationkey.enableConfigDeployment(RHN, newkey)



if __name__ == '__main__':
    
    # Parse command line args and set loglevel
    opts, args = parse_cmdline(sys.argv[1:])
    if opts.debug:
        rhnloglevel = 10
    elif opts.verbose:
        rhnloglevel = 20
    else:
        rhnloglevel = 30


    try:
        # initialise an RHN Session
        RHN = rhnapi.rhnSession(opts.server, opts.login, opts.password,
                                config=opts.config, savecreds=opts.cache, debug=opts.debug,
                                logfile = opts.logfile, logenable = not(opts.quiet),
                                logname = os.path.basename(sys.argv[0]), loglevel=rhnloglevel,
                                )
        # did we give the --debug switch?
        if opts.verbose:
            RHN.enableVerbose()

        # debug dials up the logging some more
        if opts.debug:
            RHN.enableDebug()

    # ---------------------------------------------------------------------------- #

        allkeys = activationkey.listActivationKeys(RHN)

        if opts.list:
            print "%-40s   Description" % "Key"
            print "----------------------------------------   ----------------------"
            for akey in allkeys:
                if react_re.search(akey['description']) is None:
                    print "%(key)-40s | %(description)s" % akey
            sys.exit(0)
        else:
            srckey = args[0]

        # process the activation key we have been given
        # basic details
        srcobj = activationkey.getDetails(RHN,srckey)

        # configuration channels in rank order

        RHN.logDebug("Got source object for key %(key)s, entitlements=%(entitlements)r" % srcobj)
        if 'provisioning_entitled' in srcobj['entitlements']:
            RHN.logInfo("key %(key)s is provisioning entitled, getting config channels" % srcobj)
            srcobj['config_channels'] = [ x['label'] for x in activationkey.listConfigChannels(RHN, srckey) ]
            RHN.logDebug("%s, number of config channels=%d" % (srcobj['key'], len(srcobj['config_channels'])))
            # config deployment
            srcobj['config_deploy'] = activationkey.checkConfigDeployment == 1

        # now let's create a new key, according to our options:
        # parameters required (from rhnapi.activationkey.create():
        # create(rhn, description, keyid='', basechannel='', entitlements=[], usagelimit=None, universalDefault=False)
        clonekey = opts.key or ''
        clonedesc = opts.description or "%s - Cloned on %s" %(srcobj['description'], time.strftime('%Y%m%d'))

        # First, we check if the key already exists, this is complicated by the addition of an N- prefix for the org
        # on key creation.  So we grab the orgid for the current user, and append that to the clonekey name (as thats
        # what activationkey.create is about to do...
        userdetails = user.getDetails(RHN, RHN.login)
        RHN.logDebug("Got details for user %s, orgid=%d" % (RHN.login, userdetails['org_id']))
        orgclonekey = "%s-%s" % (userdetails['org_id'], clonekey)
        RHN.logInfo("Checking if key %s exists already" % orgclonekey)
        if clonekey in [ x['key'] for x in allkeys ]:
            RHN.logErr("key %s already exists. Auto generating a new one." % clonekey)
            clonekey = ''
            sys.exit(1)
        else:
            RHN.logDebug("About to clone %s as %s" % (srcobj['key'], clonekey))
            clone_activationkey(RHN, srcobj, clonedesc, RHN.logger, clonekey, opts.verbose)

    except KeyboardInterrupt:
        print "Operation cancelled by keystroke."
        sys.exit(1)

