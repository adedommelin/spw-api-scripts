#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# RHN/Spacewalk XMLRPC API script
# requires the python-rhnapi module
#
# Copyright 2009-2012 Stuart Sears
#
# This file is part of spw-api-scripts
#
# spw-api-scripts is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# spw-api-scripts is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with spw-api-scripts. If not, see http://www.gnu.org/licenses/.

__doc__ = """
spw-create-channel

An RHN XMLRPC API script to create a new software channel in your satellite.

requires the rhnapi python module somewhere on your PYTHONPATH
"""
__author__ = "Stuart Sears <sjs@redhat.com>"

# --------------------- Python Standard Library Modules ---------------------- #
import sys
import os
from optparse import OptionParser, OptionGroup

# ------------------------------ Custom Modules ------------------------------ #
import rhnapi
from rhnapi import channel

# --------------------------- Script Configuration --------------------------- #

# server hostname and config file location
RHNHOST = 'localhost'
RHNCONFIG = '~/.rhninfo'

# authentication information
# put these in your config file
RHNUSER = None
RHNPASS = None

# ---------------------------------------------------------------------------- #

def parse_cmdline(argv):
    """
    process the commandline :)
    """
    preamble = "Create a new software channel based on the options given"
    usagestr = "%prog [RHNOPTS] -c CHANNEL [OTHEROPTS]"
    # initialise our parser and set some default options
    parser = OptionParser(usage = usagestr, description = preamble)
    parser.add_option("--debug", action = "store_true", default = False,
        help = "enable debug output for RHN session (XMLRPC errors etc.) Sets loglevel to DEBUG.")
    parser.add_option('-v', '--verbose', action = 'store_true', default = False,
        help = "increase verbosity. Sets loglevel to INFO")
    parser.add_option("-q", "--quiet", action = "store_true", default = False,
        help = "Disable all logging and output")

    # RHN Satellite options group
    rhngrp = OptionGroup(parser, "RHN Satellite Options", "Defaults can be set in your RHN API config file (%s)" % RHNCONFIG )
    rhngrp.add_option("--server",help="RHN satellite server hostname [%default]", default=RHNHOST)
    rhngrp.add_option("--login", help="RHN login (username)" , default=RHNUSER)
    rhngrp.add_option("--pass", dest = "password", help="RHN password. This is better off in a config file.", default=RHNPASS)
    rhngrp.add_option("--config", dest = "config", help="Local RHN configuration file [ %default ]", default=RHNCONFIG)
    rhngrp.add_option("--cache", action = "store_true", default = False,
        help = "save usernames and password in config file, if missing")
    rhngrp.add_option("--log", dest = "logfile", default = None,
        help = "log output to the given filename. If you enable logging without this, logs go to stderr")
    parser.add_option_group(rhngrp)

    # script-specific options
    changrp = OptionGroup(parser, "Channel Options")
    changrp.add_option("-c", "--channel", help = "Channel LABEL", default=None)
    changrp.add_option("-n", "--name", help = "Channel NAME (defaults to the label) ", default=None)
    changrp.add_option("-s", "--summary", help = "Channel summary (defaults to the label) ", default=None)
    changrp.add_option("-a", "--arch", help = "Channel Architecture [%default] ", default="x86_64")
    changrp.add_option("-p", "--parent", help="Parent for new channel. Default is a base channel", default="")
    changrp.add_option("--test", action="store_true", default=False, help="Test channel creation would work and exit")
    parser.add_option_group(changrp)


    opts, args = parser.parse_args()

    # process the args and return the valid ones...
    if opts.channel is None:
        print "you must provide a label for your new channel"
        sys.exit(1)
    # handle the purely weird channel architecture labels.
    if not opts.arch.startswith('channel-'):
        opts.arch = "channel-%s" % opts.arch
    
    if not opts.name:
        opts.name = opts.channel.strip()
    
    if not opts.summary:
        opts.summary = opts.channel.strip()

    # ignore all extraneous args:
    return opts

# ---------------------------------------------------------------------------- #

def main():    
    opts = parse_cmdline(sys.argv)
    if opts.debug:
        rhnloglevel = 10
    elif opts.verbose:
        rhnloglevel = 20
    else:
        rhnloglevel = 30

    # initialiase an RHN Session
    try:
        RHN = rhnapi.rhnSession(opts.server, opts.login, opts.password,
                                config=opts.config, savecreds=opts.cache, debug=opts.debug,
                                logfile = opts.logfile, logenable = True,
                                logname = os.path.basename(sys.argv[0]), loglevel=rhnloglevel,
                                )
        # did we give the --debug switch?
        if opts.verbose:
            RHN.enableVerbose()

        # debug dials up the logging some more
        if opts.debug:
            RHN.enableDebug()

        # get the existing channel list:
        RHN.logInfo("Enumerating existing channels on your satellite")
        chanlist     = channel.listAllChannels(RHN)
        RHN.logDebug("Enumerating Base Channels")
        # this just returns a list of base channel labels
        basechannels = channel.listBaseChannels(RHN)
        chanlabels   = [ x['label'] for x in  chanlist ]
        # if a parent channel is specified, does it already exist?
        if opts.parent and ( opts.parent not in basechannels ):
            RHN.logError("Parent Channel '%s' does not exist. Aborting." % opts.parent)
            sys.exit(2)

        # check if the desired label is already used
        if opts.channel in chanlabels:
            RHN.logError("Channel label %s already exists. Please choose a different label." % channel)
            sys.exit(3)

        # okay, we have the information needed, let's try and create the channel

        if opts.test:
            print "Exiting without creating channel"
            sys.exit(0)
        if channel.create(RHN, opts.channel, opts.name.strip(), opts.summary.strip(), opts.arch.strip(), parent=opts.parent.strip()):
            RHN.logInfo("channel %s successfully created" % opts.channel)
        else:
            RHN.logError("Failed to create channel. Oops.")
            
    except KeyboardInterrupt:
        print "Operation cancelled by keystroke."
        sys.exit(1)
        print

# ---------------------------------------------------------------------------- #

if __name__ == '__main__':
    main()

# footer - do not edit below here
# vim: set et cindent ts=4 sts=4 sw=4 ft=python:
