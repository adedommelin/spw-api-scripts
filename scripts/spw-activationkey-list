#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# RHN/Spacewalk XMLRPC API script
# requires the python-rhnapi module
#
# Copyright 2009-2012 Stuart Sears
#
# This file is part of spw-api-scripts
#
# spw-api-scripts is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# spw-api-scripts is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with spw-api-scripts. If not, see http://www.gnu.org/licenses/.

__doc__ = """
print a pretty table of the activation keys on your satellite
"""

__author__ = "Stuart Sears <stuart@sjsears.com>"

# --------------------- Python Standard Library Modules ---------------------- #
import os
import sys
from optparse import OptionParser, OptionGroup
import re

# -------------------------- Custom Python Modules --------------------------- #
import rhnapi
from rhnapi import channel
from rhnapi import systemgroup
from rhnapi import activationkey

# --------------------------- Script Configuration --------------------------- #

# server hostname and config file location
RHNHOST = 'localhost'
RHNCONFIG = '~/.rhninfo'

# authentication
# put these in your configfile, dammit;
RHNUSER = None
RHNPASS = None


# script-specific configuration
ent_maps = { 'provisioning_entitled'   : 'provisioning',
             'monitoring_entitled'     : 'monitoring',
             'virtualization_host'     : 'virt',
             'virtualization_platform' : 'virt-platform',
}

react_re = re.compile(r'^(Kickstart )?(Reactivation|re-activation) Key.*$', re.I)

# --------------------------------------------------------------------------------- #

def parse_cmdline(argv):
    """
    process the commandline :)
    """
    preamble = "List activationkeys on your RHN Satellite server."
    usagestr = "%prog [RHNOPTS]"
    # initialise our parser and set some default options
    parser = OptionParser(usage = usagestr, description = preamble)
    parser.add_option("--debug", action = "store_true", default = False,
        help = "enable debug output for RHN session (XMLRPC errors etc.) Sets loglevel to DEBUG.")
    parser.add_option('-v', '--verbose', action = 'store_true', default = False,
        help = "increase verbosity. Sets loglevel to INFO")
    parser.add_option("-q", "--quiet", action = "store_true", default = False,
        help = "Disable all logging and output")

    # RHN Satellite options group
    rhngrp = OptionGroup(parser, "RHN Satellite Options", "Defaults can be set in your RHN API config file (%s)" % RHNCONFIG )
    rhngrp.add_option("--server",help="RHN satellite server hostname [%default]", default=RHNHOST)
    rhngrp.add_option("--login", help="RHN login (username)" , default=RHNUSER)
    rhngrp.add_option("--pass", dest = "password", help="RHN password. This is better off in a config file.", default=RHNPASS)
    rhngrp.add_option("--config", dest = "config", help="Local RHN configuration file [ %default ]", default=RHNCONFIG)
    rhngrp.add_option("--cache", action = "store_true", default = False,
        help = "save usernames and password in config file, if missing")
    rhngrp.add_option("--log", dest = "logfile", default = None,
        help = "log output to the given filename. If you enable logging without this, logs go to stderr")
    parser.add_option_group(rhngrp)
    
    parser.add_option("-r", "--reactivation-keys", action = "store_true", default = False, help = "Include Reactivation keys in list [%default]")

    # script-specific options
    opts, args = parser.parse_args()
    # check the args for errors etc...

    # finally...
    return opts, args

# ---------------------------------------------------------------------------- #

def main():
    opts, args = parse_cmdline(sys.argv)
    if opts.debug:
        rhnloglevel = 10
    elif opts.verbose:
        rhnloglevel = 20
    else:
        rhnloglevel = 30

    # initialiase an RHN Session
    try:
        RHN = rhnapi.rhnSession(opts.server, opts.login, opts.password,
                                config=opts.config, savecreds=opts.cache, debug=opts.debug,
                                logfile = opts.logfile, logenable = not(opts.quiet),
                                logname = os.path.basename(sys.argv[0]), loglevel=rhnloglevel,
                                )
        # did we give the --debug switch?
        if opts.verbose:
            RHN.enableVerbose()

        # debug dials up the logging some more
        if opts.debug:
            RHN.enableDebug()
        print "%-40s   Description" % "Key"
        print "----------------------------------------   ----------------------"
        for actkey in rhnapi.activationkey.listActivationKeys(RHN):
            if react_re.search(actkey['description']) and not opts.reactivation_keys:
                continue
            else:
                print "%(key)-40s | %(description)s" % actkey
        # DO STUFF
    except KeyboardInterrupt:
        RHN.logError("operation cancelled by keystroke")
        print "operation cancelled"
        sys.exit(1)


# ---------------------------------------------------------------------------- #

if __name__ == '__main__':
    main()
    
    
    
# footer - do not edit below here
# vim: set et cindent ts=4 sts=4 sw=4 ft=python:
