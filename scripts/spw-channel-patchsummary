#!/usr/bin/env python
# -*- coding: utf-8 -*-
# RHN/Spacewalk API script
#
# Copyright 2009-2012 Stuart Sears
#
# This file is part of spw-api-scripts
#
# spw-api-scripts is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# spw-api-scripts is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with spw-api-scripts. If not, see http://www.gnu.org/licenses/.
# template API script using the rhnapi python module
# the module will need to be on your PYTHONPATH
# or its parent directory added using sys.path.append
#
# ------------------------------- end licence -------------------------------- #
#
# This script requires the python-rhnapi module


__doc__ = """
spw-channel-patchsummary

Designed to produce a list of unsynced errata from a source channel
since the given start date (defaults to the first of the current calendar month)
and produce a CVS output from them
Can read channel mappings from a JSON-format config file like this:
(only a single channel section shown below)
[
    {   "group"    : "clone-rhel5"
        "errata"   : "ALL",
        "base"   : "rhel-x86_64-server-5",
        "source"     : "clone-rhel-x86_64-server-5"
        "children" : [
            {
                "source" : "rhel-x86_64-server-productivity-5",
                "label"   : "clone-rhel-x86_64-server-productivity-5"
            },
            {
                "source" : "rhn-tools-rhel-x86_64-server-5",
                "label"   : "clone-rhn-tools-rhel-x86_64-server-5"
            }
        ]
    },
]
UPDATE:
    also reads YAML now, in this format
rhel5-group:
  base: clone-rhel-x86_64-server-5
  source: rhel-x86_64-server-5
  children:
    - label: clone-rhel-x86_64-server-productivity-5
      source: rhel-x86_64-server-productivity-5
    - label: clone-rhn-tools-rhel-x86_64-server-5
      source: rhn-tools-rhel-x86_64-server-5

"""
__author__ = "Stuart Sears <stuart@sjsears.com>"

# ------------------------- standard library imports ------------------------- #
import sys
import os
import time
import csv
from optparse import OptionParser, OptionGroup

try:
    import yaml
    yamlsupport = True
except ImportError:
    print "YAML support not available"
    print "Please install PyYAML if you require this"
    yamlsupport = False



# -------------------------- custom module imports --------------------------- #
import rhnapi
from rhnapi import channel
from rhnapi import errata
from rhnapi import utils

# ------------------------- configuration variables. ------------------------- #
# the defaults are probably okay, actually.
RHNCONFIG = '~/.rhninfo'
RHNHOST = 'localhost'

# put these in your configfile, dammit;
RHNUSER = None
RHNPASS = None

CHANNELMAPS = [ os.path.expanduser('~/.rhn-channels.conf'), '/etc/sysconfig/rhn-channels.conf' ]

ERRLEVELS = [ 'Critical', 'Important', 'Moderate', 'Low' ]

ERRTYPES = {
        'security' : 'Security Advisory',
        'bug'      : 'Bug Fix Advisory',
        'feature'  : 'Product Enhancement Advisory',
        }

# ---------------------------------------------------------------------------- #

def parse_cmdline(argv):
    """
    process the commandline :)
    """
    preamble = "Generate a CSV list of unsynced errata for a given channel since the given date"
    usagestr = "%prog [RHNOPTS]"
    # initialise our parser and set some default options
    parser = OptionParser(usage = usagestr, description = preamble)
    parser.add_option("--debug", action = "store_true", default = False,
        help = "enable debug output for RHN session (XMLRPC errors etc.) Sets loglevel to DEBUG.")
    parser.add_option('-v', '--verbose', action = 'store_true', default = False,
        help = "increase verbosity. Sets loglevel to INFO")
#    parser.add_option("-q", "--quiet", action = "store_true", default = False,
#        help = "Disable all logging and output")

    # RHN Satellite options group
    rhngrp = OptionGroup(parser, "RHN Satellite Options", "Defaults can be set in your RHN API config file (%s)" % RHNCONFIG )
    rhngrp.add_option("--server",help="RHN satellite server hostname [%default]", default=RHNHOST)
    rhngrp.add_option("--login", help="RHN login (username)" , default=RHNUSER)
    rhngrp.add_option("--pass", dest = "password", help="RHN password. This is better off in a config file.", default=RHNPASS)
    rhngrp.add_option("--config", dest = "config", help="Local RHN configuration file [ %default ]", default=RHNCONFIG)
    rhngrp.add_option("--cache", action = "store_true", default = False,
        help = "save usernames and password in config file, if missing")
    rhngrp.add_option("--log", dest = "logfile", default = None,
        help = "log output to the given filename. If you enable logging without this, logs go to stderr")
    parser.add_option_group(rhngrp)

    # script-specific options
    changrp = OptionGroup(parser, "Channel and Errata Selection Options")
    changrp.add_option("-c", "--channel", help = "cloned channel label to summarise")
    changrp.add_option("-s", "--source", help = "Source channel (where CHANNEL was cloned from")
    changrp.add_option("-o", "--output", help = "Output File for results")
    changrp.add_option("-m", "--channel-mapping",
        help = "JSON or YAML-format file grouping/mapping source and cloned channels", default = None)
    changrp.add_option("-g", "--group", help = "Channel group (from mapping file) to summarise")
    changrp.add_option("-l", "--list", action = "store_true", default = False,
        help = "display a list of channel mappings from the configuration file")
    changrp.add_option("-i", "--info", action = "store_true", default = False,
        help = "display clone info about the chosen group and exit (requires -g/--group)")
    parser.add_option_group(changrp)

    errgrp = OptionGroup(parser, "Errata selection options")
    errgrp.add_option("-d", "--date", help = "Only summarise errata released after this date")
    errgrp.add_option("--latest", action="store_true", default=False,
        help = "Only include the latest errata (based on synopsis and issue date)")
    errgrp.add_option("-t", "--type", default="security,bug,feature",
        help = "Errata types to show. 'security','bug','feature'. Can be a comma-separated list. No spaces")
    errgrp.add_option("-p", "--priority",
        help="importance of errata to include. Comma-separated list, no spaces. Choose from 'critical','important','moderate', and 'low'. All levels are displayed by default")
    parser.add_option_group(errgrp)

    if len(argv) == 0:
        parser.print_help()
        sys.exit(0)

    opts, args = parser.parse_args(argv)
    # check the args for errors etc...
    # convert to a list for use with SafeConfigParser
    if opts.channel_mapping is not None:
        opts.channel_mapping = [ opts.channel_mapping ]
    else:
        opts.channel_mapping = CHANNELMAPS

    if opts.type:
        errtypes = opts.type.split(',')
        opts.errtypes = [ ERRTYPES.get(e) for e in errtypes if ERRTYPES.has_key(e) ]
    else:
        opts.errtypes = []

    if opts.priority:
        errprio = [ p.title() for p in opts.priority.split(',') ]
        opts.priorities = [ p for p in errprio if p in ERRLEVELS ]
    else:
        opts.priorities = []

    # if asked for a list of channel groups, no other args are required
    if opts.list:
        return opts, args
    if not opts.group:
        if opts.info:
            print "The -i/--info option requires a group name (using -g/--group)"
            parser.print_help()
            sys.exit(2)
        if not opts.channel:
            print "You must provide a channel to summarise"
            parser.print_help()
            sys.exit(2)

        if not opts.source:
            print "Which channel was %s cloned from?" % opts.channel
            parser.print_help()
            sys.exit(2)
                

    if not opts.output:
        print "no output file provided, using stdout"
        opts.output = sys.stdout

    # finally...
    return opts, args

# ---------------------------------------------------------------------------- #

def write_csv(data, filename, logger):
    """
    moved out of the main function for portability
    because we are munging the data a little, can't simply call utils.csvReport
    """
    # fields = ['advisory', 'synopsis', 'issue_date', 'last_modified_date', 'urgency' , 'channel', 'description']
    # fields = ['advisory', 'synopsis', 'issue_date', 'last_modified_date', 'urgency' , 'channel']
    fields = ['advisory', 'synopsis', 'issue_date', 'urgency' , 'channel']
    try:
        for row in data:
            syn = row['synopsis'].split(':')
            if len(syn) == 2:
                urg, desc = syn
            else:
                urg = 'None'
                desc = syn[0]
            row['urgency']  = urg.strip()
            row['synopsis'] = desc.strip()

        print "writing %d entries to %s" %(len(data), str(filename))
        mywriter = utils.csvReport(data, filename, fields = fields)
        logger.info("wrote %d lines to %s" %(len(data), str(filename)))
        return mywriter
        
    except Exception, E:
        logger.warn("An Exception Occurred: %s" % E.__str__())
        logger.critical("ERROR: could not write to file %s" % filename)
        return False
        
# ---------------------------------------------------------------------------- #

def diff_errata(rhn, chanobj, date, newest=False):
    """
    returns a dict of errata since the given date that have not been
    cloned from source to dest channels

    parameters:
    rhn(rhnapi.rhnSession)  - authenticated RHN session object
    chanlabel (str)         - channel label
    source(str)             - SOURCE channel label (usually where 'chanlabel' was cloned from)
    date(str)               - list errata since the given date fmt: YYYY-MM-DD HH:MM:SS
    """
    chanlabel = chanobj.get('label')
    chansource = chanobj.get('source')
    results = []
    chanerrata = channel.listErrata(rhn, chanlabel)
    # for splitting out repeated errata
    chankeys = [ x['advisory'].split('-')[1] for x in chanerrata ]
    srcerrata = channel.listErrata(rhn, chansource, start_date = date)
    for e in srcerrata:
        # this avoids clones of existing errata being included
        if e['advisory'].split('-')[1] not in chankeys:
            e['channel'] = chanlabel
            del e['last_modified_date']
            results.append(e)

    if newest:
        rhn.logInfo("reducing list of errata to latest only (by synopsis)")
        latest = latest_by_synopsis(results)
        rhn.logDebug("Reduced errata list from %d to %d errata"  %(len(results), len(latest)))
        print "Found %d errata (latest only) for %s" %(len(latest), chanobj['label'])
        return latest

    else:
        rhn.logDebug("Found %d errata" % len(results))
        print "Found %d errata for %s" %(len(results), chanobj['label'])
        return results

# ---------------------------------------------------------------------------- #

def latest_by_synopsis(errlist):
    # need to get a list of the latest errata with a given synopsis based on date
    index = {}
    for err in errlist:
        syn = err.get('synopsis')
        name = err.get('advisory')
        if index.has_key(syn):
            if name > index[syn]['advisory']:
                index[syn].update(err)
            else:
                continue
        else:
            index[syn] = err
    # just return the values, we don't need the keys
    return index.values()

# ---------------------------------------------------------------------------- #

def reduce_errata(errlist, logger, priolist=[], typelist=[]):
    """
    munge and reduce our list of errata based on priority and 'type'
    """
    res = []
    logger.debug("parsing for priorities: %r" % priolist)
    logger.debug("parsing for errata types: %r" % typelist)
    for e in errlist:
        delete = False
        if len(priolist) != 0:
            e['prio'] = e.get('synopsis').split(':')[0].strip()
            if e['prio'] == '':
                logger.debug("%advisory)s has no assigned priority, skipping" % e)
                delete = True
            elif e['prio'] not in priolist:
                logger.debug("Skipping %(advisory)s due to priority selection [ %(prio)s ]" % e)
                delete = True
        if len(typelist) != 0 :
            if e.get('advisory_type') not in typelist:
                logger.debug("Skipping %(advisory)s due to type selection [ %(advisory_type)s ]" % e)
                delete = True

        # if we're still here...
        if not delete:
            res.append(e)

    if len(res) < len(errlist):
        logger.info("Type and priority selection reduced list from %d to %d errata" %(len(errlist),len(res)))

    return res

# ---------------------------------------------------------------------------- #

def dump_group(channelmap, groupname, formatstr):
    """
    Just dumps information about an individual group from the mapping file
    """
    data = channelmap.get(groupname, None)
    if data is not None:
        print "Group : '%s'" % groupname
        print formatstr % {'label' : 'Channel Label', 'source' : 'Cloned From'}
        print formatstr % {'label' : '-------------', 'source' : '-----------'}
        print formatstr % data.get('base')
        for c in data.get('children', []):
            print formatstr % c
        print


# ---------------------------------------------------------------------------- #

def dump_mappings(channelmaps, groupname=None):
    """
    Dump the list of channel mappings and groups to stdout

    parameters:
    channelmaps(dict)       - channel mapping dictionary (probably loaded from
                              JSON)
    """
    # utils.getMaxLen requires a list of dict, so:
    allvals = channelmaps.values() 
    for d in channelmaps.values():
        allvals.extend(d['children'])
    maxlen = utils.getMaxLen(allvals)
    
    fmtstr = "%%(label)-%(label)ds %%(source)-%(source)ds" % maxlen
    if groupname is not None:
        if not channelmaps.has_key(groupname):
            print "No config found for group %s" % groupname
            return False
        else:            
            dump_group(channelmaps, groupname, fmtstr)
    else:        
        for group in sorted(channelmaps):
            dump_group(channelmaps, group, fmtstr)

# ---------------------------------------------------------------------------- #

def loadYAML(inputfile, logger):
    """
    Attempts to import data from the given YAML-format file
    """
    try:
        fd = open(inputfile, 'r')
        data = yaml.load(fd)
        fd.close()
        logger.info("Loaded YAML data from %s" % inputfile)
        return data
    except:
        logger.error("unable to load YAML data from %s" % inputfile)
        return None


# ---------------------------------------------------------------------------- #

def main():
    """
    The core script content
    """
    # timestamp for use in filenames (logs, mostly)
    tstamp = time.strftime("%Y-%m-%d.%H%M%S")

    # process command line options and arguments
    opts, args = parse_cmdline(sys.argv[1:])
    if opts.debug:
        rhnloglevel = 10
    elif opts.verbose:
        rhnloglevel = 20
    else:
        rhnloglevel = 30

    try:
        RHN = rhnapi.rhnSession(opts.server, opts.login, opts.password,
                                config=opts.config, savecreds=opts.cache, debug=opts.debug,
                                logfile = opts.logfile, logenable = True,
                                logname = os.path.basename(sys.argv[0]), loglevel=rhnloglevel,
                                )
        # did we give the --verbose switch?
        if opts.verbose:
            RHN.enableVerbose()

        # debug dials up the logging some more
        if opts.debug:
            RHN.enableDebug()

        if opts.group:
            RHN.logInfo("processing group %s" % opts.group)
        # collect errata from cloned channel
        if opts.date:
            monthstart = "%s 00:00:00" % opts.date
            RHN.logInfo("Using date provided on commandline (%s)" % monthstart)
        else:            
            monthstart = "%s-01 00:00:00" % time.strftime("%Y-%m")
            RHN.logInfo("No date provided, defaulting to the beginning of this month (%s)" % monthstart)

        # Default value for sanity
        channelmaps = None

        # find the appropriate channel mapping file
        # process each listed file until one works
        for c in opts.channel_mapping:
            RHN.logInfo("reading %s" % c)
            if yamlsupport and c.endswith('.yaml'):
                RHN.logInfo("processing %s" % c)
                channelmaps = loadYAML(c, RHN.logger)
            else:
                channelmaps = utils.loadJSON(c)
            if channelmaps is not None:
                break

        if channelmaps is not None:
        # we've successfully parsed the channel mapping file
        # so if we've been asked for a grouplist, do that and exit
            if opts.list:
                dump_mappings(channelmaps)
                sys.exit(0)

            if opts.group:
                if opts.info:
                    dump_mappings(channelmaps, opts.group)
                    sys.exit(0)
                channelinfo = channelmaps.get(opts.group, {})                    

        else:
            # if not, use the command-line options provided
            channelinfo = {
                            'label'     : opts.channel,
                            'source'   : opts.source,
                            'children' : [] 
                          }

        # otherwise, process the groups selected
        # now process our channels and their sources:
        # diff_errata(rhn, chanlabel, source, date)
        basechan = channelinfo.get('base')
        if basechan is not None:
            RHN.logInfo("processing Base Channel %(label)s" % basechan)
            results = diff_errata(RHN, basechan, monthstart, opts.latest)
        else:
            results = []
        
        # process each child channel in turn
        for childchan in channelinfo.get('children', []):
            RHN.logInfo("processing child channel %(label)s" % childchan)
            kerr = diff_errata(RHN, childchan, monthstart, opts.latest)
            if len(kerr) > 0:
                results.extend(kerr)
        
        # reduce errata according to preferences
        reduced_errata = reduce_errata(results, RHN.logger, opts.priorities, opts.errtypes)

        # fetch details for all our errata
        for err in reduced_errata:
            errdata = errata.getDetails(RHN, err['advisory'])
        # this is in a stupid hardcoded US format...
            del errdata['issue_date']
            err.update(errdata)
            if opts.debug:
                RHN.logDebug("%(advisory)s - %(advisory_type)s - %(synopsis)s" % err)

        # now we need to write a CSV file, use cvs.DictWriter, it'll be easier :)
        print "Errata for %s since %s" %(opts.group, monthstart)
        if write_csv(reduced_errata, opts.output, RHN.logger):
            RHN.logInfo("CSV output successful")
       



    except KeyboardInterrupt:
        print "Operation cancelled by keystroke."
        sys.exit(1)
        
# --------------------------------------------------------------------------------- #

if __name__ == '__main__':
    # if the script is run directly, do this:
    main()

# footer - do not edit below here
# vim: set et ai smartindent ts=4 sts=4 sw=4 ft=python nofen:
