#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# RHN/Spacewalk XMLRPC API script
# requires the python-rhnapi module
#
# Copyright 2009-2012 Stuart Sears / Red Hat Inc.
# Copyright 2013- Stuart Sears / Man Group PLC
#
# This file is part of spw-api-scripts
#
# spw-api-scripts is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# spw-api-scripts is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with spw-api-scripts. If not, see http://www.gnu.org/licenses/


__author__ = "Stuart Sears <stuart.sears@man.com>"

# --------------------- Python Standard Library Modules ---------------------- #
import sys
import os
# for matching RPM package name strings
# import re
# for commandline parsing
from optparse import OptionParser, OptionGroup
# for pretty-printing debug output
from pprint import pprint
# for sorting the results
from operator import itemgetter
# extracting elements from RPM file names
from rpmUtils.miscutils import splitFilename

# ---------------------------------------------------------------------------- #
# Custom Python Modules
import rhnapi
from rhnapi import packages, errata

# ---------------------------------------------------------------------------- #
# core script configuration
RHNHOST = 'localhost'
RHNCONFIG = '~/.rhninfo'
# put these in your configfile, dammit
RHNUSER = None
RHNPASS = None

# ---------------------------------------------------------------------------- #

__doc__ = """
%s
An RHN API package to provide free-form lucene package searches and print out
the errata that provide a given package, to make cloning easier.

Uses the rhnapi python module, so ensure this is on your PYTHONPATH
The information this provides can be used to 
""" % os.path.basename(__file__)

# ---------------------------------------------------------------------------- #

def parse_cmdline(argv):
    """
    process the commandline :)
    """
    preamble = "Search for packages on your satellite and list the errat(a|um) that provides them, if any"
    usagestr = "%prog [RHNOPTS] -n packagename [-v VERSION] [-r RELEASE ] -a [ARCH]"
    # initialise our parser and set some default options
    parser = OptionParser(usage = usagestr, description = preamble)
    parser.add_option("--debug", action = "store_true", default = False,
            help = "enable debug output for RHN session (XMLRPC errors etc")
    parser.add_option('-v', '--verbose', action = 'store_true', default = False,
            help = "increase verbosity")
    parser.add_option("--quiet", action = "store_true", default = False, help = "Disable all logging and output")

    # RHN Satellite options group
    rhngrp = OptionGroup(parser, "RHN Satellite Options", "Defaults can be set in your RHN API config file (%s)" % RHNCONFIG )
    rhngrp.add_option("--server",help="RHN satellite server hostname [%default]", default=RHNHOST)
    rhngrp.add_option("--login", help="RHN login (username)" , default=RHNUSER)
    rhngrp.add_option("--pass", dest = "password", help="RHN password. This is better off in a config file.", default=RHNPASS)
    rhngrp.add_option("--config", dest = "config", help="Local RHN configuration file [ %default ]", default=RHNCONFIG)
    rhngrp.add_option("--cache", action = "store_true", default = False,
        help = "save usernames and password in config file, if missing")
    rhngrp.add_option("--log", dest = "logfile", default = None,
        help = "log output to the given filename. If you enable logging without this, logs go to stderr")
    parser.add_option_group(rhngrp)

    # script-specific options
    pkggrp = OptionGroup(parser, "Package selection")
    pkggrp.add_option("-n", "--name", help = "Package Name to search for")
    pkggrp.add_option("-V", "--version", help = "Package Version")
    pkggrp.add_option("-r", "--release", help = "Package Release")
    pkggrp.add_option("-a", "--arch", help = "Package Arch")
    pkggrp.add_option("-q", "--query", help = "Raw lucene format query. Overrides the other options")
    pkggrp.add_option("-f", "--filename", help = "figure out package names etc from a filename (the RPM package name)")
    parser.add_option_group(pkggrp)

    if len(argv) == 0:
        parser.print_help()
        sys.exit(1)
    opts, args = parser.parse_args(argv)
    # check the args for errors etc...

    # finally...
    return opts, args
        
# ---------------------------------------------------------------------------- #

# ---------------------------------------------------------------------------- #

def filename_to_query(fname):
    """
    temporary test using rpmUtils
    """
    try:
        pkginfo = dict(zip(("name", "version", "release", "epoch", "arch"),splitFilename(fname)))
    except Exception, E:
        print "%s does not appear to be a valid RPM filename" % fname
        sys.exit(1)
    strparts = []
    for k, v in pkginfo.iteritems():
        if v == '':
            continue
        else:
            strparts.append("%s:%s" %(k, v))
    return ' AND '.join(strparts)

# ---------------------------------------------------------------------------- #

def reduce_list(seq): 
    """
    non-order preserving uniquifying function for lists and other sequences
    """
    # a set is an unordered collection of unique entries
    s = set(seq)
    return list(s)
        
# ---------------------------------------------------------------------------- #
if __name__ == '__main__':
    
    opts, args = parse_cmdline(sys.argv[1:])
    if opts.debug:
        rhnloglevel = 10
    elif opts.verbose:
        rhnloglevel = 20
    else:
        rhnloglevel = 30
    # initialiase an RHN Session
    try:
        RHN = rhnapi.rhnSession(opts.server, opts.login, opts.password,
                                config=opts.config, savecreds=opts.cache, debug=opts.debug,
                                logfile = opts.logfile, logenable = not(opts.quiet),
                                logname = os.path.basename(sys.argv[0]), loglevel=rhnloglevel,
                                )
        # did we give the --debug switch?
        if opts.verbose:
            RHN.enableVerbose()

        # debug dials up the logging some more
        if opts.debug:
            RHN.enableDebug()

        # were we given a proper lucene query string?
        if opts.query:
            querystr = opts.query
        # if called with a filename argument, use that
        elif opts.filename:
            querystr = filename_to_query(opts.filename)
            print querystr
        # finally we parse the other nvrea args
        else:
            queryitems = []
            if opts.name:
                queryitems.append('name:"%s"' % opts.name)
            if opts.version:
                queryitems.append('version:"%s"' % opts.version)
            if opts.release:
                queryitems.append('release:"%s"' % opts.release)
            if opts.arch:
                queryitems.append('arch:"%s"' % opts.arch)
            querystr = ' AND '.join(queryitems)

        if opts.verbose:
            print "Querying with search string: %s" % querystr

        # perform a lucene query using our query string:
        
        # list of matching packages
        # we only really need the IDs though
        pkgs = packages.search(RHN, querystr) 

        if not pkgs:
            RHN.logErr("search with parameters %s failed" % querystr)
            print "search with parameters %s failed" % querystr
            sys.exit(2)
        
        # if the search worked, but returned nothing...
        if pkgs and len(pkgs) == 0:
            RHN.logErr("No packages seem to match the provided search parameters (%s)" % querystr)
        else:
            errlist = []
            # for convenience:
            pids = [ p.get('id') for p in pkgs ]

            for p in pids:
                for err in packages.listProvidingErrata(RHN, p):
                    errlist.append(err.get('advisory'))

            # reduce the list to unique entries only:        
            errlist = reduce_list(errlist)                    

            # now we reduce the list of errata further, by stripping out
            # RH advisories that have already been cloned.
            # this assumes that cloned errata have the same ID as their source
            # erratum, e.g. RHXX-2010:NNNN -> CLA-2010:NNNN

            # get a list of unique cloned errata advisories:
            clones = reduce_list([ x for x in errlist if x.startswith('CLA') ])

            # do the same for the RH** advisories:
            rhids  = reduce_list([ x for x in errlist if x.startswith('RH') ])

            # now run through the clones and compare them to the RH ids, removing
            # all the RH errata that match something in the clone list:
            for c in clones:
                # split the clone ids:
                ct, cn = c.split('-')
                for r in rhids:
                # split the rhids to compare advisory ID numbers
                    rtype, rname = r.split('-')
                    if cn == rname:
                        rhids.remove(r)
            
            # now recombine them (this would work in either order)
            clones.extend(rhids)
            # sort them by the advisory date so we get them in ascending order
            clones.sort(key = lambda k: k.split('-')[1])

            if opts.verbose:
                print "reduced errata list from %d to %d entries" %(len(errlist), len(clones))
                print "Gathering information for output"

            print "Errata providing matching packages"
            print "Search Term: '%s'" % querystr
            print "============================================================="
            for adv in clones:
                # extract the synopsis
                descr = errata.getDetails(RHN, adv).get('synopsis')
                # get the RPM filenames from the 'path' entry
                payload = [ x['path'].split('/').pop() for x in errata.listPackages(RHN, adv)]

                print "Advisory: %s" % adv
                print "Synopsis: %s" % descr
                print "RPM Packages:"
                for p in payload:
                    print "  %s" % p
                print
                print "---------------\n"



    except KeyboardInterrupt:
        print "operation cancelled"
        sys.exit(1)


    
    
    
