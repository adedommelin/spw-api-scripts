#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# RHN/Spacewalk XMLRPC API script
# requires the python-rhnapi module
#
# Copyright 2009-2012 Stuart Sears
#
# This file is part of spw-api-scripts
#
# spw-api-scripts is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# spw-api-scripts is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with spw-api-scripts. If not, see http://www.gnu.org/licenses/.

__doc__ = """
spw-configchannel-delete

Irrevocably deletes a configuration channel from your satellite.
Back them up first (see spw_export_configchannel) for safety and sanity
"""
# standard library imports
import sys
import os
from optparse import OptionParser, OptionGroup
from fnmatch import fnmatch

# custom module imports
# base RHN modules and classes:
import rhnapi
# configuration channel methods:
from rhnapi import configchannel

# global vars for defaults
# At least RHNHOST should  be specified
# if you don't want to use defaults, you should 
# leave these here, but set to None
RHNHOST = 'localhost'
RHNCONFIG = '~/.rhninfo'

# put these in your configfile, dammit;
RHNUSER = None
RHNPASS = None

def parse_cmdline(argv):
    """
    process the commandline :)
    give this sys.argv[1:] as an argument to avoid any issues with the script name
    being considered an 'argument' and processed
    """
    preamble = """
    Delete the specified configuration channel(s) from your satellite. Use with care.
You might want to back them up first. See 'spw-configchannel-export' for one way to do this.
Channel labels can also be shell globs/wildcards. The --test option allows you to see which 
channels would be deleted.
    """
    usagestr = "%prog [OPTIONS] CHANNEL_LABEL..."
    # initialise our parser and set some default options
    parser = OptionParser(usage = usagestr, description = preamble)
    parser.add_option("--debug", action = "store_true", default = False,
        help = "enable debug output for RHN session (XMLRPC errors etc.) Sets loglevel to DEBUG.")
    parser.add_option('-v', '--verbose', action = 'store_true', default = False,
        help = "increase verbosity. Sets loglevel to INFO")
    parser.add_option("-q", "--quiet", action = "store_true", default = False,
        help = "Disable all logging and output")

    # RHN Satellite options group
    rhngrp = OptionGroup(parser, "RHN Satellite Options", "Defaults can be set in your RHN API config file (%s)" % RHNCONFIG )
    rhngrp.add_option("--server",help="RHN satellite server hostname [%default]", default=RHNHOST)
    rhngrp.add_option("--login", help="RHN login (username)" , default=RHNUSER)
    rhngrp.add_option("--pass", dest = "password", help="RHN password. This is better off in a config file.", default=RHNPASS)
    rhngrp.add_option("--config", dest = "config", help="Local RHN configuration file [ %default ]", default=RHNCONFIG)
    rhngrp.add_option("--cache", action = "store_true", default = False,
        help = "save usernames and password in config file, if missing")
    rhngrp.add_option("--log", dest = "logfile", default = None,
        help = "log output to the given filename. If you enable logging without this, logs go to stderr")
    parser.add_option_group(rhngrp)

    confgrp = OptionGroup(parser, "Configuration Channel Options")
    confgrp.add_option("-l", "--list", action = "store_true", default = False,
        help = "Just list existing configuration channel labels and exit")
    confgrp.add_option("-n", "--test", action = "store_true", default = False,
        help = "List the configuration channels which would be deleted.")
    parser.add_option_group(confgrp)

    # script-specific options
    opts, args = parser.parse_args(argv)

    # do sanity-checking stuff here
    if len(args) < 1 and not opts.list:
        print "You must provide at least one configuration channel label"
        parser.print_help()
        sys.exit(1)

    # finally return the cleaned options and args
    return opts, args

def main():
    # process command-line arguments
    opts, args = parse_cmdline(sys.argv[1:])
    # initiate a connection to 
    if opts.debug:
        rhnloglevel = 10
    elif opts.verbose:
        rhnloglevel = 20
    else:
        rhnloglevel = 30

    try:
        RHN = rhnapi.rhnSession(opts.server, opts.login, opts.password,
                                config=opts.config, savecreds=opts.cache, debug=opts.debug,
                                logfile = opts.logfile, logenable = not(opts.quiet),
                                logname = os.path.basename(sys.argv[0]), loglevel=rhnloglevel,
                                )
        # did we give the --debug switch?
        if opts.verbose:
            RHN.enableVerbose()

        # debug dials up the logging some more
        if opts.debug:
            RHN.enableDebug()
        existing_labels = [ x['label'] for x in configchannel.listGlobals(RHN) ]
        # support shell globbing of arguments
        chanlist = []
        RHN.logInfo("reducing channel selection to existing and matching channels")
        for chan in args:
            chanlist.extend([ l for l in existing_labels if fnmatch(l, chan) ])

        if opts.list:
            print "Existing Configuration Channels"
            print "==============================="
            print '\n'.join(existing_labels)
            sys.exit(0)
        
        elif opts.test:
            print "Configuration Channels to be deleted"
            print "===================================="
            print "\n".join(chanlist)
            sys.exit(0)


        else:  
            for chan in chanlist:
                RHN.logDebug("Deleting config channel %s" % chan)
                if configchannel.deleteConfigChannel(RHN, chan):
                    RHN.logInfo("Configuration channel '%s' successfully deleted" % chan)
                else:
                    RHN.logErr("failed to delete channel %s" % chan)

    except KeyboardInterrupt:
        print "Operation Cancelled\n"
        sys.exit(1)



if __name__ == '__main__':
    main()

# footer - do not edit below here
# vim: set et cindent ts=4 sts=4 sw=4 ft=python:


    

