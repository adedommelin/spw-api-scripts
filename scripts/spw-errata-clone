#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# RHN/Spacewalk XMLRPC API script
# requires the python-rhnapi and python-progressbar modules
#
# Copyright 2009-2012 Stuart Sears
#
# This file is part of spw-api-scripts
#
# spw-api-scripts is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# spw-api-scripts is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with spw-api-scripts. If not, see http://www.gnu.org/licenses/.

__doc__ = """
spw-errata-clone

An errata cloning/publishing script intended to
1. take a list of errata and channel labels
2. *clone* RH errata into one channel
   - then publish the clones into the other channels
3. publish the non-RH errata into all selected channels.

Currently no checking if an erratum has already been cloned
- this probably requires RHN DB usage

for specific packages you can get lists of providing errata
using the spw-package-listerrata script
"""

__author__ = "Stuart Sears <stuart@sjsears.com>"

# --------------------- Python Standard Library Modules ---------------------- #
import os
import sys
from optparse import OptionParser, OptionGroup
import re

# -------------------------- Custom Python Modules --------------------------- #
import rhnapi
from rhnapi import errata

# --------------------------- Script Configuration --------------------------- #
# config file location and server hostname
RHNCONFIG = '~/.rhninfo'
RHNHOST = 'localhost'

# authentication info
# put these in your configfile, dammit;
RHNUSER = None
RHNPASS = None

# script-specific customisation
rh_pattern = re.compile('^RH(SA|BA|EA)-.*')

# ---------------------------------------------------------------------------- #

# ---------------------------------------------------------------------------- #

def parse_cmdline(argv):
    """
    process the commandline :)
    """
    preamble = "Clone the specified list of errata (or publish already cloned errata) from one channel to another"
    usagestr = "%prog [RHNOPTS] -c CHANNEL ERRATUM..."
    parser = OptionParser(usage = usagestr, description = preamble)
    parser.add_option("--debug", action = "store_true", default = False,
        help = "enable debug output for RHN session (XMLRPC errors etc.) Sets loglevel to DEBUG.")
    parser.add_option('-v', '--verbose', action = 'store_true', default = False,
        help = "increase verbosity. Sets loglevel to INFO")
    parser.add_option("-q", "--quiet", action = "store_true", default = False,
        help = "Disable all logging and output")

    # RHN Satellite options group
    rhngrp = OptionGroup(parser, "RHN Satellite Options", "Defaults can be set in your RHN API config file (%s)" % RHNCONFIG )
    rhngrp.add_option("--server",help="RHN satellite server hostname [%default]", default=RHNHOST)
    rhngrp.add_option("--login", help="RHN login (username)" , default=RHNUSER)
    rhngrp.add_option("--pass", dest = "password", help="RHN password. This is better off in a config file.", default=RHNPASS)
    rhngrp.add_option("--config", dest = "config", help="Local RHN configuration file [ %default ]", default=RHNCONFIG)
    rhngrp.add_option("--cache", action = "store_true", default = False,
        help = "save usernames and password in config file, if missing")
    rhngrp.add_option("--log", dest = "logfile", default = None,
        help = "log output to the given filename. If you enable logging without this, logs go to stderr")
    parser.add_option_group(rhngrp)

    # option group for non-generic options
    errgrp = OptionGroup(parser, "Errata and Channel Options")
    errgrp.add_option("-c", "--channel",
        help="Channel LABEL to clone or publish errata to. Can be a comma-separated list. No spaces")
    errgrp.add_option("--test", action="store_true", default=False,
            help="Display errata that would be cloned/published")
    parser.add_option_group(errgrp)


    if len(argv) == 0:
        parser.print_help()
        sys.exit(0)

    opts, args = parser.parse_args(argv)
    # check the args for errors etc...

    # finally...
    return opts, args

# ---------------------------------------------------------------------------- #

def main():
    """
    Core script functionality
    """
    opts, args = parse_cmdline(sys.argv[1:])
    if opts.debug:
        rhnloglevel = 10
    elif opts.verbose:
        rhnloglevel = 20
    else:
        rhnloglevel = 30

    # initialise an RHN Session
    try:
        RHN = rhnapi.rhnSession(opts.server, opts.login, opts.password,
                                config=opts.config, savecreds=opts.cache, debug=opts.debug,
                                logfile = opts.logfile, logenable = not(opts.quiet),
                                logname = os.path.basename(sys.argv[0]), loglevel=rhnloglevel,
                                )
        # did we give the --debug switch?
        if opts.verbose:
            RHN.enableVerbose()

        # debug dials up the logging some more
        if opts.debug:
            RHN.enableDebug()
        RHN.logDebug("Working with channel list: %s" % opts.channel)
        channel_list = opts.channel.split(',')
        errata_list = args

        clone_list = []
        publish_list = []
        for erratum in errata_list:
            if rh_pattern.match(erratum):
                RHN.logDebug("cloning RH Erratum %s" % erratum)
                clone_list.append(erratum)
            else:
                RHN.logDebug("publishing already cloned erratum %s" % erratum)
                publish_list.append(erratum)

        print "Errata to clone: ", clone_list
        print "Errata to publish", publish_list
        # so, first we clone into our first channel, then publish into any others
        if len(clone_list) != 0:
            # okay, if we have more than one destination channel
            # clone the list of RH errata into our first channel
            # this takes a single channel and a list of errata.
            clonedest = channel_list[0]
            print "cloning Red Hat errata into %s" % clonedest
            
            # keep a list for publishing later:
            new_clones = errata.cloneAsOriginal(RHN, clonedest, clone_list)
            # publish these into the remaining channels
            # we have more than one channel to clone/publish into...
            if len(channel_list) > 1:
                RHN.logInfo("publishing newly cloned errata into other selected channels")
                for erratum in [ x['advisory_name'] for x in new_clones ]:
                    RHN.logDebug("erratum: %s" % erratum)
                    errata.publishAsOriginal(RHN, erratum, channel_list[1:])

            # now just publish all the other errata into all selected channels
            # this is done one erratum at a time, to multiple channels
        if len(publish_list) != 0:
            for erratum in publish_list:
                if opts.verbose:
                    print "publishing previously cloned erratum %s into selected channels" % erratum,
                data = errata.publishAsOriginal(RHN, erratum, channel_list)
                if type(data) == dict:
                    if opts.verbose:
                        print " ...complete"
    
    except KeyboardInterrupt:
        print "operation cancelled"
        sys.exit(1)

if __name__ == '__main__':
    main()

# footer - do not edit below here
# vim: set et ai smartindent ts=4 sts=4 sw=4 ft=python:
