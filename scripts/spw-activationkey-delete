#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# RHN/Spacewalk XMLRPC API script
# requires the python-rhnapi module
#
# Copyright 2009-2012 Stuart Sears
#
# This file is part of spw-api-scripts
#
# spw-api-scripts is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# spw-api-scripts is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with spw-api-scripts. If not, see http://www.gnu.org/licenses/.

__doc__ = """
spw-activationkey-delete

Deletes the provided (list of) Activation Key(s) from your satellite

Uses the python-rhnapi module to do this.

WARNING
This script irrevocably removes activation keys from your satellite.
use with care.
You can backup the keys using spw-activationkey-export first
"""
__author__ = "Stuart Sears <sjs@redhat.com>"

# --------------------- Python Standard Library Modules ---------------------- #
import os
import sys
import re
from optparse import OptionParser, OptionGroup

# -------------------------- Custom Python Modules --------------------------- #
# PYTHONPATH (or in the same dir as this script)
import rhnapi
from rhnapi import activationkey


# --------------------------- Script Configuration --------------------------- #

# config file location and server hostname
RHNHOST = 'localhost'
RHNCONFIG = '~/.rhninfo'

# authentication information
RHNUSER = None
RHNPASS = None

# script-specific customisation
react_pattern = re.compile(r'^(Kickstart )?(Reactivation|re-activation) Key.*$', re.I)

# ---------------------------------------------------------------------------- #

def parse_cmdline(argv):
    """
    process the commandline :)
    give this sys.argv[1:] as an argument to avoid any issues with the script name
    being considered an 'argument' and processed
    """
    preamble = "Delete the provided activation key(s) [the long hex ids] from your satellite. Use with care."
    usagestr = "%prog [RHNOPTS] ACTIVATIONKEY..."
    # initialise our parser and set some generic options
    parser = OptionParser(usage = usagestr, description = preamble)
    parser.add_option("--debug", action = "store_true", default = False,
        help = "enable debug output for RHN session (XMLRPC errors etc.) Sets loglevel to DEBUG.")
    parser.add_option('-v', '--verbose', action = 'store_true', default = False,
        help = "increase verbosity. Sets loglevel to INFO")
    parser.add_option("-q", "--quiet", action = "store_true", default = False,
        help = "Disable all logging and output")

    # RHN Satellite options group
    rhngrp = OptionGroup(parser, "RHN Satellite Options", "Defaults can be set in your RHN API config file (%s)" % RHNCONFIG )
    rhngrp.add_option("--server",help="RHN satellite server hostname [%default]", default=RHNHOST)
    rhngrp.add_option("--login", help="RHN login (username)" , default=RHNUSER)
    rhngrp.add_option("--pass", dest = "password", help="RHN password. This is better off in a config file.", default=RHNPASS)
    rhngrp.add_option("--config", dest = "config", help="Local RHN configuration file [ %default ]", default=RHNCONFIG)
    rhngrp.add_option("--cache", action = "store_true", default = False,
        help = "save usernames and password in config file, if missing")
    rhngrp.add_option("--log", dest = "logfile", default = None,
        help = "log output to the given filename. If you enable logging without this, logs go to stderr")
    parser.add_option_group(rhngrp)

    # script-specific options
    keygrp = OptionGroup(parser,"Activation Key Options")
    keygrp.add_option("--list", action = "store_true", default = False, help = "List activation keys and exit [%default]")
    keygrp.add_option("-r", "--include-reactivation", action = "store_true", default = False, help = "Include Reactivation keys in listings [%default]")
    parser.add_option_group(keygrp)

    opts, args = parser.parse_args(argv)

    # finally return the cleaned options and args
    return opts, args
        
# --------------------------------------------------------------------------------- #

def main():    
    # process command-line arguments
    # initiate a connection to 

    opts, args = parse_cmdline(sys.argv[1:])

    if opts.debug:
        rhnloglevel = 10
    elif opts.verbose:
        rhnloglevel = 20
    else:
        rhnloglevel = 30

    try:
        RHN = rhnapi.rhnSession(opts.server, opts.login, opts.password,
                                config=opts.config, savecreds=opts.cache, debug=opts.debug,
                                logfile = opts.logfile, logenable = not(opts.quiet),
                                logname = os.path.basename(sys.argv[0]), loglevel=rhnloglevel,
                                )
        # did we give the --debug switch?
        if opts.verbose:
            RHN.enableVerbose()

        # debug dials up the logging some more
        if opts.debug:
            RHN.enableDebug()

        all_keys = activationkey.listActivationKeys(RHN)

        if not opts.include_reactivation:
            RHN.logInfo("Removing reactivation keys from our key list")
            all_keys = [ x for x in all_keys if not react_pattern.match(x['description'])]

        if opts.list:
            print "Activation Keys on your satellite"
            if not opts.include_reactivation:
                print "(Reactivation Keys Excluded)"
            if len(all_keys) == 0:
                print "(No Activation Keys found)"
                sys.exit(0)
            print "%-36s %s" %("Activation Key", "Description")
            print "-----------------------------------  ------------------------------------"
            for actkey in all_keys:
                print "%(key)-36s %(description)s" % actkey
            sys.exit(0)

        for akey in args:
            RHN.logDebug("Going to delete Activation key %s" % akey)
            if activationkey.delete(RHN, akey):
                RHN.logInfo("Successfully deleted key %s" % akey)
                print "Activation key %s deleted" % akey
            else:
                RHN.logErr("ERROR: failed to delete activation key %s" % akey)
                print "Failed to delete activation key %s" % akey

    except KeyboardInterrupt:
        print "Operation Cancelled\n"
        sys.exit(1)

if __name__ == '__main__':
    main()

