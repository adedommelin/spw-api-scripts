#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# RHN/Spacewalk XMLRPC API script
# requires the python-rhnapi module
#
# Copyright 2012 Stuart Sears
#
# This file is part of spw-api-scripts
#
# spw-api-scripts is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 2 of the License, or (at your option)
# any later version.
#
# spw-api-scripts is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with spw-api-scripts. If not, see http://www.gnu.org/licenses/.

"""
spw-package-audit

A script to audit a list of RPMs from a server against an existing channel in RHN Satellite / Spacewalk

RPM list should include epoch and be in this queryformat:
%{epoch}:%{name}-%{version}-%{release}.%{arch}
"""
__author__ = "Stuart Sears <stuart.sears@man.com>"

# --------------------- Python Standard Library Modules ---------------------- #
import os
import sys
import rpmUtils.miscutils as rpmutils
from optparse import OptionParser, OptionGroup

# -------------------------- Custom Python Modules --------------------------- #
import rhnapi
from rhnapi import channel
from rhnapi import utils


# -------------------------- RHN API Configuration --------------------------- #

# server hostname and config file location
RHNCONFIG = '~/.rhninfo'
RHNHOST = 'localhost'

# authentication information
# put these in your configfile, dammit;
RHNUSER = None
RHNPASS = None


# --------------------------- Script Configuration --------------------------- #
# put global variables for the script in here

# ---------------------------------------------------------------------------- #

def parse_cmdline(argv):
    """
    process the commandline :)
    """
    preamble = """Compare the output of rpm -qa --qf '%{name}-%{version}-%{release}.%{arch}' to
a channel in RHN Satellite/Spacewalk (and optionally all its child channels).
Produces a report for each channel detailing older and newer packages, plus a list of packages not
found in any of the chosen channels.
"""
    usagestr = "%prog [RHNOPTS] -c CHANNEL [-r] INPUTFILE"
    # initialise our parser and set some default options
    parser = OptionParser(usage = usagestr, description = preamble)
    parser.add_option("--debug", action = "store_true", default = False,
        help = "enable debug output for RHN session (XMLRPC errors etc.) Sets loglevel to DEBUG.")
    parser.add_option('-v', '--verbose', action = 'store_true', default = False,
        help = "increase verbosity. Sets loglevel to INFO")

    # RHN Satellite options group
    rhngrp = OptionGroup(parser, "RHN Satellite Options", "Defaults can be set in your RHN API config file (%s)" % RHNCONFIG )
    rhngrp.add_option("--server",help="RHN satellite server hostname [%default]", default=RHNHOST)
    rhngrp.add_option("--login", help="RHN login (username)" , default=RHNUSER)
    rhngrp.add_option("--pass", dest = "password", help="RHN password. This is better off in a config file.", default=RHNPASS)
    rhngrp.add_option("--config", dest = "config", help="Local RHN configuration file [ %default ]", default=RHNCONFIG)
    rhngrp.add_option("--cache", action = "store_true", default = False,
        help = "save usernames and password in config file, if missing")
    rhngrp.add_option("--log", dest = "logfile", default = None,
        help = "log output to the given filename. If you enable logging without this, logs go to stderr")
    parser.add_option_group(rhngrp)

    # Channel Selection options
    changrp = OptionGroup(parser, "Channel and System selection options")
    changrp.add_option("-c", "--channel", help = "RHN/Spacewalk software channel LABEL. Can also be a comma-separated list, without spaces")
    changrp.add_option("-r", "--recursive", action = "store_true", default = False,
        help = "Process and report on child software channels. Requires that --channel is a single base software channel (not a list)")
    changrp.add_option("-p", "--printout", action = "store_true", default = False,
        help = "print out a list of packages not in satellite channels")
    changrp.add_option("-o", "--output", metavar = "OUTPUTFILE", help = "Dump comparison info in JSON format to OUTPUTFILE")
    changrp.add_option("-s", "--skip-empty", dest = "skip", action = "store_true", default = False,
        help = "Hide channels with no matching packages in report output")
    parser.add_option_group(changrp)

    def error(lines, exitcode = 1):
        """
        opts/args error reporting, to avoid overly repetitive code.
        """
        print '\n'.join(lines)
        parser.print_help()
        sys.exit(exitcode)

    if len(argv) == 0:
        error([], 1)

    opts, args = parser.parse_args(argv)
    # check the args for errors etc...
    if not opts.channel:
        error([ "ERROR: No channel label provided" ])
    else:
        opts.channel = opts.channel.split(',')

    if opts.recursive and len(opts.channel) > 1:
        error(["ERROR: Recursive mode requires a single base channel label",
               "You have provided more than one argument to --channel"])

    if len(args) != 1:
        error( ["ERROR: No input file provided"])

    elif not os.path.isfile(args[0]):
        error( ["ERROR: Input file %s does not exist" % args[0] ] )

    # finally...
    return opts, args
        
# ---------------------------------------------------------------------------- #

def getevr(nvreastr):
    """
    splitFilename returns items in the wrong order for comparison. Dammit.
    """
    n,v,r,e,a = rpmutils.splitFilename(nvreastr)
    return (e, v, r)

# ---------------------------------------------------------------------------- #

def newest(nvrea_list):
    """
    returns 'newest' item from a list of nvreas for the same package!
    """
    if len(nvrea_list) == 1:
        return nvrea_list[0]
    else:        
        pkgname = rpmutils.splitFilename(nvrea_list[0])[0]

    evrlist = [ getevr(x) for x in nvrea_list ]
    latest = evrlist[0]
    winner = 0
    # enumerate returns a list of tuples (index, entry) from an iterable
    for i, e in enumerate(evrlist):
        if rpmutils.compareEVR(e, latest) == 1:
            latest = evrlist[i]
            winner = i
        else:
            continue

    return nvrea_list[winner]

# ---------------------------------------------------------------------------- #

def name_index(pkgset):
    """
    returns a dict, indexed on package names from a set of nvrea strings
    """
    res = {}
    for p in pkgset:
        name, ver, rel, epoch, arch = rpmutils.splitFilename(p)
        pid = '%s.%s' % (name, arch)
        if not res.has_key(pid):
            res[pid] = [ p ]
        else:
            res[pid].append(p)

    index = {}
    for k, v in res.iteritems():
        index[k] = newest(v)

    return index

    
# ---------------------------------------------------------------------------- #

def compare_evr(n1, n2):
    """
    compares 2 nvreas for the same package.
    """

    # just return the cmp result (-1,0,1)
    return rpmutils.compareEVR(getevr(n1), getevr(n2))
    

# ---------------------------------------------------------------------------- #

def nvrea_cmp(syspkgset, chanpkgset, logger):
    """
    compares nvrea strings ('%(epoch)s:%(name)s-%(version)s-%(release)s.%(arch)s')
    across sets.
    returns 3 sets:
    """
    # index by name, latest versions only
    logger.debug("reducing package sets to newest versions")
    logger.debug("%d packages in system list" % len(syspkgset))
    d1 = name_index(syspkgset)
    d2 = name_index(chanpkgset)
    # sets for output...
    # there should be no packages left that are identical,
    # we'll have removed these before this is called
    # so the 'identical' set should remain empty
    newer = set()
    older = set()
    missing = set()
    identical = set()

    for k, v in d1.iteritems():
        logger.debug("processing package %s" % k)
        if not d2.has_key(k):
            missing.add(v)
        else:
            try:
                res = compare_evr(v, d2.get(k))
            except:
                print "Error processing packages"
                print v
                print d2.get(k)
                raise
            if res == 1:
                newer.add(v)
                syspkgset.remove(v)
            elif res == 0:
                identical.add(v)
                syspkgset.remove(v)
            elif res == -1:
                older.add(v)
                syspkgset.remove(v)
            else:
                logger.error("error comparing %s and %s. This should not happen" % (v, d2.get(k)))
                continue


    logger.debug("Now %d packages in system set" % len(syspkgset))
    output = { 'newer' : newer, 'older' : older, 'identical' : identical }
    # we should strip out the already matched packages...
    # well, that's just the 'missing' set, so pass that back to the caller
    return output, syspkgset


    
# ---------------------------------------------------------------------------- #

def reduce_nvrea(packagelist):
    """
    Reduces a list of package objects to a set (de-duped list) of nvrea strings.
    Well, technically e:nvr.a :)
    """
    return set([ ('%(epoch)s:%(name)s-%(version)s-%(release)s.%(arch_label)s' % p).strip() for p in packagelist ])

# ---------------------------------------------------------------------------- #

def main():    
    opts, args = parse_cmdline(sys.argv[1:])
    if opts.debug:
        rhnloglevel = 10
    elif opts.verbose:
        rhnloglevel = 20
    else:
        rhnloglevel = 30
# create an RHN session and do stuff with it
    try:
        RHN = rhnapi.rhnSession(opts.server, opts.login, opts.password,
                                config=opts.config, savecreds=opts.cache, debug=opts.debug,
                                logfile = opts.logfile, logenable = True,
                                logname = os.path.basename(sys.argv[0]), loglevel=rhnloglevel,
                                )
        # did we give the --verbose switch?
        if opts.verbose:
            RHN.enableVerbose()

        # debug dials up the logging some more
        if opts.debug:
            RHN.enableDebug()

        # to avoid explosions, we need to replace epoch '(none)' from rpm -qa
        # with epoch ''

        syspkgs = set([ x.replace('(none)', '').strip() for x in open(args[0]) ])
        RHN.logInfo("%d unique installed packages to consider" % len(syspkgs))

        # just for simplicity of typing:
        chanlist = opts.channel

        # Do we need to process child channels too?
        if opts.recursive:
            # use a custom rhnapi method to pull child channel labels
            RHN.logInfo("Fetching child channels for %s" % chanlist[0])
            chanlist.extend(channel.listChildChannels(RHN, chanlist[0]))

            
        pkgsummary = {}
        for chan in chanlist:
            RHN.logDebug("Fetching list of newest packages for channel %s" % chan)

            # generate a set of unique nvrea strings for the channel.
            # this will be manipulated and all matching package removed
            chanpkgs = reduce_nvrea(channel.listLatestPackages(RHN, chan))

            # find all nvrea strings that are in both sets
            matches = chanpkgs.intersection(syspkgs)
            RHN.logDebug("System and channel have %d packages in common" % len(matches))
            
            # now remove the matched packages, reducing the original package set
            RHN.logDebug("Removing matched packages from channel package set")
            chanpkgs.difference_update(matches)
            RHN.logDebug("Reduced channel package set to %d packages" % len(chanpkgs))

            # also remove *precisely* matched packages from our system set
            syspkgs.difference_update(matches)
            RHN.logDebug("Reduced system package set to %d packages" % len(syspkgs))

            # now let's do a 'name.arch' comparison across channel and package, to generate a list of
            # packages that are in the channel and our remaining package list, but not identical versions
            chanidx = name_index(chanpkgs)
            sysidx = name_index(syspkgs)
            matchednames = set()
            older = set()
            newer = set()
            for name, pkg in sysidx.iteritems():
                if name not in chanidx.keys():
                    # there is no package with this name in the channel, so ignore it.
                    continue
                else:
                    t1 = getevr(pkg)
                    t2 = getevr(chanidx[name])
                    cmp = rpmutils.compareEVR(t1, t2)
                    if cmp == -1:
                    # system package is older
                        RHN.logDebug("syspkg %s < chanpkg %s" %(name, chanidx[name]))
                        older.add(pkg)
                        syspkgs.remove(pkg)
                    elif cmp == 1:
                    # system package is newer
                        RHN.logDebug("syspkg %s > chanpkg %s" %(name, chanidx[name]))
                        newer.add(pkg)
                        syspkgs.remove(pkg)
                    else:
                        RHN.logErr("Error comparing %s and %s" %(name, chanidx[name]))
            RHN.logInfo("Summary for channel %s" % chan)

            chansummary = {
                            'newer'   : newer,
                            'older'   : older,
                            'matches' : matches,
                          }
            RHN.logInfo("Matching Packages: %d" % len(matches))                                    
            RHN.logInfo("Older Packages: %d" % len(older))                                    
            RHN.logInfo("Newer Packages: %d" % len(newer))                                    
            RHN.logInfo("Unmatched Packages: %d" % len(syspkgs))                                    

            pkgsummary[chan] = chansummary
            

        # once we're all done...
        # add the still unmatched packages to the 'local' channel
        pkgsummary['local'] = syspkgs

        if opts.output:
            # dump generated data to a json-format file for testing/re-use
            utils.dumpJSON(pkgsummary, opts.output)

        # Now we generate a report...
        chanwidth = max([len(x) for x in pkgsummary.keys()])
        print "%s | Matching | Older    | Newer    |" % "channel".ljust(chanwidth)
        print "%s | ======== | ======== | ======== |" % "=".ljust(chanwidth, "=")
        linefmt = "%%-%ds | %%-8d | %%-8d | %%-8d |" % chanwidth
        
        for k, v in pkgsummary.iteritems():
            if k in [ 'local' ]:
                continue
            else:
                m, o, n = len(v['matches']), len(v['older']), len(v['newer'])
                if opts.skip and (m,o,n) == (0,0,0):
                    continue
                else:                    
                    print linefmt %(k, m, o, n)

        print "locally installed packages: %d" % len(pkgsummary['local'])

        if opts.printout:
            print "----------------------------"
            print "\n".join(pkgsummary['local'])





# break on ctrl-c
    except KeyboardInterrupt:
        print "Operation cancelled by keystroke."
        sys.exit(1)
    
if __name__ == '__main__':
    main()



# footer - do not edit below here
# vim: set et cindent ts=4 sts=4 sw=4 nu ft=python:
